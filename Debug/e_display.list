
e_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000535c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000957c  080055fc  080055fc  000155fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800eb78  0800eb78  0001eb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800eb7c  0800eb7c  0001eb7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  0800eb80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c0  24000074  0800ebf4  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000134  0800ebf4  00020134  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d2e2  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000022ae  00000000  00000000  0002d384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a98  00000000  00000000  0002f638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000958  00000000  00000000  000300d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003772b  00000000  00000000  00030a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ea8d  00000000  00000000  00068153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00155106  00000000  00000000  00076be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001cbce6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000303c  00000000  00000000  001cbd38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080055e4 	.word	0x080055e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	080055e4 	.word	0x080055e4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <DEV_SPI_WriteByte>:
#include "stm32h7xx_hal_spi.h"
#include "spi.h"

//extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
    ret = HAL_SPI_Transmit(&hspi3, &value, 1, 10);
 800038a:	1df9      	adds	r1, r7, #7
 800038c:	230a      	movs	r3, #10
 800038e:	2201      	movs	r2, #1
 8000390:	4806      	ldr	r0, [pc, #24]	; (80003ac <DEV_SPI_WriteByte+0x2c>)
 8000392:	f003 fe0b 	bl	8003fac <HAL_SPI_Transmit>
 8000396:	4603      	mov	r3, r0
 8000398:	73fb      	strb	r3, [r7, #15]
    if(ret != HAL_OK){
 800039a:	7bfb      	ldrb	r3, [r7, #15]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d000      	beq.n	80003a2 <DEV_SPI_WriteByte+0x22>
    	while(1);
 80003a0:	e7fe      	b.n	80003a0 <DEV_SPI_WriteByte+0x20>
    }
//    HAL_Delay(2U);
}
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	24000094 	.word	0x24000094

080003b0 <EPD_2IN9_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2IN9_Reset(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80003b4:	2201      	movs	r2, #1
 80003b6:	2101      	movs	r1, #1
 80003b8:	480b      	ldr	r0, [pc, #44]	; (80003e8 <EPD_2IN9_Reset+0x38>)
 80003ba:	f001 f96d 	bl	8001698 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 80003be:	20c8      	movs	r0, #200	; 0xc8
 80003c0:	f000 fe62 	bl	8001088 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2101      	movs	r1, #1
 80003c8:	4807      	ldr	r0, [pc, #28]	; (80003e8 <EPD_2IN9_Reset+0x38>)
 80003ca:	f001 f965 	bl	8001698 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 80003ce:	2002      	movs	r0, #2
 80003d0:	f000 fe5a 	bl	8001088 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80003d4:	2201      	movs	r2, #1
 80003d6:	2101      	movs	r1, #1
 80003d8:	4803      	ldr	r0, [pc, #12]	; (80003e8 <EPD_2IN9_Reset+0x38>)
 80003da:	f001 f95d 	bl	8001698 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 80003de:	20c8      	movs	r0, #200	; 0xc8
 80003e0:	f000 fe52 	bl	8001088 <HAL_Delay>
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	58020800 	.word	0x58020800

080003ec <EPD_2IN9_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2IN9_SendCommand(UBYTE Reg)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2108      	movs	r1, #8
 80003fa:	480a      	ldr	r0, [pc, #40]	; (8000424 <EPD_2IN9_SendCommand+0x38>)
 80003fc:	f001 f94c 	bl	8001698 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000400:	2200      	movs	r2, #0
 8000402:	2110      	movs	r1, #16
 8000404:	4807      	ldr	r0, [pc, #28]	; (8000424 <EPD_2IN9_SendCommand+0x38>)
 8000406:	f001 f947 	bl	8001698 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ffb7 	bl	8000380 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8000412:	2201      	movs	r2, #1
 8000414:	2110      	movs	r1, #16
 8000416:	4803      	ldr	r0, [pc, #12]	; (8000424 <EPD_2IN9_SendCommand+0x38>)
 8000418:	f001 f93e 	bl	8001698 <HAL_GPIO_WritePin>
}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	58020000 	.word	0x58020000

08000428 <EPD_2IN9_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2IN9_SendData(UBYTE Data)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8000432:	2201      	movs	r2, #1
 8000434:	2108      	movs	r1, #8
 8000436:	480a      	ldr	r0, [pc, #40]	; (8000460 <EPD_2IN9_SendData+0x38>)
 8000438:	f001 f92e 	bl	8001698 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800043c:	2200      	movs	r2, #0
 800043e:	2110      	movs	r1, #16
 8000440:	4807      	ldr	r0, [pc, #28]	; (8000460 <EPD_2IN9_SendData+0x38>)
 8000442:	f001 f929 	bl	8001698 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff99 	bl	8000380 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800044e:	2201      	movs	r2, #1
 8000450:	2110      	movs	r1, #16
 8000452:	4803      	ldr	r0, [pc, #12]	; (8000460 <EPD_2IN9_SendData+0x38>)
 8000454:	f001 f920 	bl	8001698 <HAL_GPIO_WritePin>
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	58020000 	.word	0x58020000

08000464 <EPD_2IN9_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2IN9_ReadBusy(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8000468:	4809      	ldr	r0, [pc, #36]	; (8000490 <EPD_2IN9_ReadBusy+0x2c>)
 800046a:	f004 f93d 	bl	80046e8 <puts>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 800046e:	e002      	b.n	8000476 <EPD_2IN9_ReadBusy+0x12>
        DEV_Delay_ms(100);
 8000470:	2064      	movs	r0, #100	; 0x64
 8000472:	f000 fe09 	bl	8001088 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8000476:	2108      	movs	r1, #8
 8000478:	4806      	ldr	r0, [pc, #24]	; (8000494 <EPD_2IN9_ReadBusy+0x30>)
 800047a:	f001 f8f5 	bl	8001668 <HAL_GPIO_ReadPin>
 800047e:	4603      	mov	r3, r0
 8000480:	2b01      	cmp	r3, #1
 8000482:	d0f5      	beq.n	8000470 <EPD_2IN9_ReadBusy+0xc>
    }
    Debug("e-Paper busy release\r\n");
 8000484:	4804      	ldr	r0, [pc, #16]	; (8000498 <EPD_2IN9_ReadBusy+0x34>)
 8000486:	f004 f92f 	bl	80046e8 <puts>
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	080055fc 	.word	0x080055fc
 8000494:	58020800 	.word	0x58020800
 8000498:	08005614 	.word	0x08005614

0800049c <EPD_2IN9_SetWindows>:
/******************************************************************************
function :	Setting the display window
parameter:
******************************************************************************/
static void EPD_2IN9_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4604      	mov	r4, r0
 80004a4:	4608      	mov	r0, r1
 80004a6:	4611      	mov	r1, r2
 80004a8:	461a      	mov	r2, r3
 80004aa:	4623      	mov	r3, r4
 80004ac:	80fb      	strh	r3, [r7, #6]
 80004ae:	4603      	mov	r3, r0
 80004b0:	80bb      	strh	r3, [r7, #4]
 80004b2:	460b      	mov	r3, r1
 80004b4:	807b      	strh	r3, [r7, #2]
 80004b6:	4613      	mov	r3, r2
 80004b8:	803b      	strh	r3, [r7, #0]
    EPD_2IN9_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 80004ba:	2044      	movs	r0, #68	; 0x44
 80004bc:	f7ff ff96 	bl	80003ec <EPD_2IN9_SendCommand>
    EPD_2IN9_SendData((Xstart >> 3) & 0xFF);
 80004c0:	88fb      	ldrh	r3, [r7, #6]
 80004c2:	08db      	lsrs	r3, r3, #3
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ffad 	bl	8000428 <EPD_2IN9_SendData>
    EPD_2IN9_SendData((Xend >> 3) & 0xFF);
 80004ce:	887b      	ldrh	r3, [r7, #2]
 80004d0:	08db      	lsrs	r3, r3, #3
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ffa6 	bl	8000428 <EPD_2IN9_SendData>

    EPD_2IN9_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 80004dc:	2045      	movs	r0, #69	; 0x45
 80004de:	f7ff ff85 	bl	80003ec <EPD_2IN9_SendCommand>
    EPD_2IN9_SendData(Ystart & 0xFF);
 80004e2:	88bb      	ldrh	r3, [r7, #4]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff9e 	bl	8000428 <EPD_2IN9_SendData>
    EPD_2IN9_SendData((Ystart >> 8) & 0xFF);
 80004ec:	88bb      	ldrh	r3, [r7, #4]
 80004ee:	0a1b      	lsrs	r3, r3, #8
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ff97 	bl	8000428 <EPD_2IN9_SendData>
    EPD_2IN9_SendData(Yend & 0xFF);
 80004fa:	883b      	ldrh	r3, [r7, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ff92 	bl	8000428 <EPD_2IN9_SendData>
    EPD_2IN9_SendData((Yend >> 8) & 0xFF);
 8000504:	883b      	ldrh	r3, [r7, #0]
 8000506:	0a1b      	lsrs	r3, r3, #8
 8000508:	b29b      	uxth	r3, r3
 800050a:	b2db      	uxtb	r3, r3
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff8b 	bl	8000428 <EPD_2IN9_SendData>
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	bd90      	pop	{r4, r7, pc}

0800051a <EPD_2IN9_SetCursor>:
/******************************************************************************
function :	Set Cursor
parameter:
******************************************************************************/
static void EPD_2IN9_SetCursor(UWORD Xstart, UWORD Ystart)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	4603      	mov	r3, r0
 8000522:	460a      	mov	r2, r1
 8000524:	80fb      	strh	r3, [r7, #6]
 8000526:	4613      	mov	r3, r2
 8000528:	80bb      	strh	r3, [r7, #4]
    EPD_2IN9_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 800052a:	204e      	movs	r0, #78	; 0x4e
 800052c:	f7ff ff5e 	bl	80003ec <EPD_2IN9_SendCommand>
    EPD_2IN9_SendData((Xstart >> 3) & 0xFF);
 8000530:	88fb      	ldrh	r3, [r7, #6]
 8000532:	08db      	lsrs	r3, r3, #3
 8000534:	b29b      	uxth	r3, r3
 8000536:	b2db      	uxtb	r3, r3
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff75 	bl	8000428 <EPD_2IN9_SendData>

    EPD_2IN9_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 800053e:	204f      	movs	r0, #79	; 0x4f
 8000540:	f7ff ff54 	bl	80003ec <EPD_2IN9_SendCommand>
    EPD_2IN9_SendData(Ystart & 0xFF);
 8000544:	88bb      	ldrh	r3, [r7, #4]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ff6d 	bl	8000428 <EPD_2IN9_SendData>
    EPD_2IN9_SendData((Ystart >> 8) & 0xFF);
 800054e:	88bb      	ldrh	r3, [r7, #4]
 8000550:	0a1b      	lsrs	r3, r3, #8
 8000552:	b29b      	uxth	r3, r3
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ff66 	bl	8000428 <EPD_2IN9_SendData>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <EPD_2IN9_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_2IN9_TurnOnDisplay(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    EPD_2IN9_SendCommand(0x22); // DISPLAY_UPDATE_CONTROL_2
 8000568:	2022      	movs	r0, #34	; 0x22
 800056a:	f7ff ff3f 	bl	80003ec <EPD_2IN9_SendCommand>
    EPD_2IN9_SendData(0xC4);
 800056e:	20c4      	movs	r0, #196	; 0xc4
 8000570:	f7ff ff5a 	bl	8000428 <EPD_2IN9_SendData>
    EPD_2IN9_SendCommand(0x20); // MASTER_ACTIVATION
 8000574:	2020      	movs	r0, #32
 8000576:	f7ff ff39 	bl	80003ec <EPD_2IN9_SendCommand>
    EPD_2IN9_SendCommand(0xFF); // TERMINATE_FRAME_READ_WRITE
 800057a:	20ff      	movs	r0, #255	; 0xff
 800057c:	f7ff ff36 	bl	80003ec <EPD_2IN9_SendCommand>

    EPD_2IN9_ReadBusy();
 8000580:	f7ff ff70 	bl	8000464 <EPD_2IN9_ReadBusy>
//    EPD_2IN9_Init(EPD_2IN9_PART);
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <EPD_2IN9_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2IN9_Init(UBYTE Mode)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
    EPD_2IN9_Reset();
 8000592:	f7ff ff0d 	bl	80003b0 <EPD_2IN9_Reset>

    EPD_2IN9_SendCommand(0x01); // DRIVER_OUTPUT_CONTROL
 8000596:	2001      	movs	r0, #1
 8000598:	f7ff ff28 	bl	80003ec <EPD_2IN9_SendCommand>
    EPD_2IN9_SendData((EPD_2IN9_HEIGHT - 1) & 0xFF);
 800059c:	2027      	movs	r0, #39	; 0x27
 800059e:	f7ff ff43 	bl	8000428 <EPD_2IN9_SendData>
    EPD_2IN9_SendData(((EPD_2IN9_HEIGHT - 1) >> 8) & 0xFF);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff ff40 	bl	8000428 <EPD_2IN9_SendData>
    EPD_2IN9_SendData(0x00); // GD = 0; SM = 0; TB = 0;
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff ff3d 	bl	8000428 <EPD_2IN9_SendData>
	
    EPD_2IN9_SendCommand(0x0C); // BOOSTER_SOFT_START_CONTROL
 80005ae:	200c      	movs	r0, #12
 80005b0:	f7ff ff1c 	bl	80003ec <EPD_2IN9_SendCommand>
    EPD_2IN9_SendData(0xD7);
 80005b4:	20d7      	movs	r0, #215	; 0xd7
 80005b6:	f7ff ff37 	bl	8000428 <EPD_2IN9_SendData>
    EPD_2IN9_SendData(0xD6);
 80005ba:	20d6      	movs	r0, #214	; 0xd6
 80005bc:	f7ff ff34 	bl	8000428 <EPD_2IN9_SendData>
    EPD_2IN9_SendData(0x9D);
 80005c0:	209d      	movs	r0, #157	; 0x9d
 80005c2:	f7ff ff31 	bl	8000428 <EPD_2IN9_SendData>
	
    EPD_2IN9_SendCommand(0x2C); // WRITE_VCOM_REGISTER
 80005c6:	202c      	movs	r0, #44	; 0x2c
 80005c8:	f7ff ff10 	bl	80003ec <EPD_2IN9_SendCommand>
    EPD_2IN9_SendData(0xA8); // VCOM 7C
 80005cc:	20a8      	movs	r0, #168	; 0xa8
 80005ce:	f7ff ff2b 	bl	8000428 <EPD_2IN9_SendData>
	
    EPD_2IN9_SendCommand(0x3A); // SET_DUMMY_LINE_PERIOD
 80005d2:	203a      	movs	r0, #58	; 0x3a
 80005d4:	f7ff ff0a 	bl	80003ec <EPD_2IN9_SendCommand>
    EPD_2IN9_SendData(0x1A); // 4 dummy lines per gate
 80005d8:	201a      	movs	r0, #26
 80005da:	f7ff ff25 	bl	8000428 <EPD_2IN9_SendData>
	
    EPD_2IN9_SendCommand(0x3B); // SET_GATE_TIME
 80005de:	203b      	movs	r0, #59	; 0x3b
 80005e0:	f7ff ff04 	bl	80003ec <EPD_2IN9_SendCommand>
    EPD_2IN9_SendData(0x08); // 2us per line
 80005e4:	2008      	movs	r0, #8
 80005e6:	f7ff ff1f 	bl	8000428 <EPD_2IN9_SendData>
	
    EPD_2IN9_SendCommand(0x3C); // BORDER_WAVEFORM_CONTROL
 80005ea:	203c      	movs	r0, #60	; 0x3c
 80005ec:	f7ff fefe 	bl	80003ec <EPD_2IN9_SendCommand>
    EPD_2IN9_SendData(0x03);                     
 80005f0:	2003      	movs	r0, #3
 80005f2:	f7ff ff19 	bl	8000428 <EPD_2IN9_SendData>
    EPD_2IN9_SendCommand(0x11); // DATA_ENTRY_MODE_SETTING
 80005f6:	2011      	movs	r0, #17
 80005f8:	f7ff fef8 	bl	80003ec <EPD_2IN9_SendCommand>
    EPD_2IN9_SendData(0x03);
 80005fc:	2003      	movs	r0, #3
 80005fe:	f7ff ff13 	bl	8000428 <EPD_2IN9_SendData>

    //set the look-up table register
    EPD_2IN9_SendCommand(0x32); // WRITE_LUT_REGISTER
 8000602:	2032      	movs	r0, #50	; 0x32
 8000604:	f7ff fef2 	bl	80003ec <EPD_2IN9_SendCommand>
    if(Mode == EPD_2IN9_FULL){
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d10f      	bne.n	800062e <EPD_2IN9_Init+0xa6>
        for (UWORD i = 0; i < 30; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	81fb      	strh	r3, [r7, #14]
 8000612:	e008      	b.n	8000626 <EPD_2IN9_Init+0x9e>
                EPD_2IN9_SendData(EPD_2IN9_lut_full_update[i]);
 8000614:	89fb      	ldrh	r3, [r7, #14]
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <EPD_2IN9_Init+0xdc>)
 8000618:	5cd3      	ldrb	r3, [r2, r3]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff04 	bl	8000428 <EPD_2IN9_SendData>
        for (UWORD i = 0; i < 30; i++) {
 8000620:	89fb      	ldrh	r3, [r7, #14]
 8000622:	3301      	adds	r3, #1
 8000624:	81fb      	strh	r3, [r7, #14]
 8000626:	89fb      	ldrh	r3, [r7, #14]
 8000628:	2b1d      	cmp	r3, #29
 800062a:	d9f3      	bls.n	8000614 <EPD_2IN9_Init+0x8c>
                EPD_2IN9_SendData(EPD_2IN9_lut_partial_update[i]);
        }
    }else{
        Debug("error, the Mode is EPD_2IN9_FULL or EPD_2IN9_PART");
    }
}
 800062c:	e015      	b.n	800065a <EPD_2IN9_Init+0xd2>
    }else if(Mode == EPD_2IN9_PART){
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d10f      	bne.n	8000654 <EPD_2IN9_Init+0xcc>
        for (UWORD i = 0; i < 30; i++) {
 8000634:	2300      	movs	r3, #0
 8000636:	81bb      	strh	r3, [r7, #12]
 8000638:	e008      	b.n	800064c <EPD_2IN9_Init+0xc4>
                EPD_2IN9_SendData(EPD_2IN9_lut_partial_update[i]);
 800063a:	89bb      	ldrh	r3, [r7, #12]
 800063c:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <EPD_2IN9_Init+0xe0>)
 800063e:	5cd3      	ldrb	r3, [r2, r3]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fef1 	bl	8000428 <EPD_2IN9_SendData>
        for (UWORD i = 0; i < 30; i++) {
 8000646:	89bb      	ldrh	r3, [r7, #12]
 8000648:	3301      	adds	r3, #1
 800064a:	81bb      	strh	r3, [r7, #12]
 800064c:	89bb      	ldrh	r3, [r7, #12]
 800064e:	2b1d      	cmp	r3, #29
 8000650:	d9f3      	bls.n	800063a <EPD_2IN9_Init+0xb2>
}
 8000652:	e002      	b.n	800065a <EPD_2IN9_Init+0xd2>
        Debug("error, the Mode is EPD_2IN9_FULL or EPD_2IN9_PART");
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <EPD_2IN9_Init+0xe4>)
 8000656:	f003 ffc1 	bl	80045dc <iprintf>
}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	08005690 	.word	0x08005690
 8000668:	080056b0 	.word	0x080056b0
 800066c:	08005634 	.word	0x08005634

08000670 <EPD_2IN9_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2IN9_Clear(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_2IN9_WIDTH % 8 == 0)? (EPD_2IN9_WIDTH / 8 ): (EPD_2IN9_WIDTH / 8 + 1);
 8000676:	2310      	movs	r3, #16
 8000678:	807b      	strh	r3, [r7, #2]
    Height = EPD_2IN9_HEIGHT;
 800067a:	f44f 7394 	mov.w	r3, #296	; 0x128
 800067e:	803b      	strh	r3, [r7, #0]
    EPD_2IN9_SetWindows(0, 0, EPD_2IN9_WIDTH, EPD_2IN9_HEIGHT);
 8000680:	f44f 7394 	mov.w	r3, #296	; 0x128
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	2100      	movs	r1, #0
 8000688:	2000      	movs	r0, #0
 800068a:	f7ff ff07 	bl	800049c <EPD_2IN9_SetWindows>
    for (UWORD j = 0; j < Height; j++) {
 800068e:	2300      	movs	r3, #0
 8000690:	80fb      	strh	r3, [r7, #6]
 8000692:	e017      	b.n	80006c4 <EPD_2IN9_Clear+0x54>
        EPD_2IN9_SetCursor(0, j);
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	4619      	mov	r1, r3
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff ff3e 	bl	800051a <EPD_2IN9_SetCursor>
        EPD_2IN9_SendCommand(0x24);
 800069e:	2024      	movs	r0, #36	; 0x24
 80006a0:	f7ff fea4 	bl	80003ec <EPD_2IN9_SendCommand>
        for (UWORD i = 0; i < Width; i++) {
 80006a4:	2300      	movs	r3, #0
 80006a6:	80bb      	strh	r3, [r7, #4]
 80006a8:	e005      	b.n	80006b6 <EPD_2IN9_Clear+0x46>
            EPD_2IN9_SendData(0XFF);
 80006aa:	20ff      	movs	r0, #255	; 0xff
 80006ac:	f7ff febc 	bl	8000428 <EPD_2IN9_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	3301      	adds	r3, #1
 80006b4:	80bb      	strh	r3, [r7, #4]
 80006b6:	88ba      	ldrh	r2, [r7, #4]
 80006b8:	887b      	ldrh	r3, [r7, #2]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d3f5      	bcc.n	80006aa <EPD_2IN9_Clear+0x3a>
    for (UWORD j = 0; j < Height; j++) {
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	3301      	adds	r3, #1
 80006c2:	80fb      	strh	r3, [r7, #6]
 80006c4:	88fa      	ldrh	r2, [r7, #6]
 80006c6:	883b      	ldrh	r3, [r7, #0]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d3e3      	bcc.n	8000694 <EPD_2IN9_Clear+0x24>
        }
    }
    EPD_2IN9_TurnOnDisplay();
 80006cc:	f7ff ff4a 	bl	8000564 <EPD_2IN9_TurnOnDisplay>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <EPD_2IN9_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_2IN9_Display(UBYTE *Image)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_2IN9_WIDTH % 8 == 0)? (EPD_2IN9_WIDTH / 8 ): (EPD_2IN9_WIDTH / 8 + 1);
 80006e0:	2310      	movs	r3, #16
 80006e2:	827b      	strh	r3, [r7, #18]
    Height = EPD_2IN9_HEIGHT;
 80006e4:	f44f 7394 	mov.w	r3, #296	; 0x128
 80006e8:	823b      	strh	r3, [r7, #16]

    UDOUBLE Addr = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
    // UDOUBLE Offset = ImageName;
    EPD_2IN9_SetWindows(0, 0, EPD_2IN9_WIDTH, EPD_2IN9_HEIGHT);
 80006ee:	f44f 7394 	mov.w	r3, #296	; 0x128
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	2100      	movs	r1, #0
 80006f6:	2000      	movs	r0, #0
 80006f8:	f7ff fed0 	bl	800049c <EPD_2IN9_SetWindows>
    for (UWORD j = 0; j < Height; j++) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	82fb      	strh	r3, [r7, #22]
 8000700:	e022      	b.n	8000748 <EPD_2IN9_Display+0x70>
        EPD_2IN9_SetCursor(0, j);
 8000702:	8afb      	ldrh	r3, [r7, #22]
 8000704:	4619      	mov	r1, r3
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff ff07 	bl	800051a <EPD_2IN9_SetCursor>
        EPD_2IN9_SendCommand(0x24);
 800070c:	2024      	movs	r0, #36	; 0x24
 800070e:	f7ff fe6d 	bl	80003ec <EPD_2IN9_SendCommand>
        for (UWORD i = 0; i < Width; i++) {
 8000712:	2300      	movs	r3, #0
 8000714:	82bb      	strh	r3, [r7, #20]
 8000716:	e010      	b.n	800073a <EPD_2IN9_Display+0x62>
            Addr = i + j * Width;
 8000718:	8aba      	ldrh	r2, [r7, #20]
 800071a:	8afb      	ldrh	r3, [r7, #22]
 800071c:	8a79      	ldrh	r1, [r7, #18]
 800071e:	fb01 f303 	mul.w	r3, r1, r3
 8000722:	4413      	add	r3, r2
 8000724:	60fb      	str	r3, [r7, #12]
            EPD_2IN9_SendData(Image[Addr]);
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	4413      	add	r3, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fe7a 	bl	8000428 <EPD_2IN9_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000734:	8abb      	ldrh	r3, [r7, #20]
 8000736:	3301      	adds	r3, #1
 8000738:	82bb      	strh	r3, [r7, #20]
 800073a:	8aba      	ldrh	r2, [r7, #20]
 800073c:	8a7b      	ldrh	r3, [r7, #18]
 800073e:	429a      	cmp	r2, r3
 8000740:	d3ea      	bcc.n	8000718 <EPD_2IN9_Display+0x40>
    for (UWORD j = 0; j < Height; j++) {
 8000742:	8afb      	ldrh	r3, [r7, #22]
 8000744:	3301      	adds	r3, #1
 8000746:	82fb      	strh	r3, [r7, #22]
 8000748:	8afa      	ldrh	r2, [r7, #22]
 800074a:	8a3b      	ldrh	r3, [r7, #16]
 800074c:	429a      	cmp	r2, r3
 800074e:	d3d8      	bcc.n	8000702 <EPD_2IN9_Display+0x2a>
        }
    }

    EPD_2IN9_TurnOnDisplay();
 8000750:	f7ff ff08 	bl	8000564 <EPD_2IN9_TurnOnDisplay>


}
 8000754:	bf00      	nop
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <EPD_2in9_test>:
#include <ImageData.h>
#include "EPD_Test.h"
#include "EPD_2in9.h"

int EPD_2in9_test(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

    EPD_2IN9_Init(EPD_2IN9_FULL);
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff11 	bl	8000588 <EPD_2IN9_Init>
 EPD_2IN9_Init(EPD_2IN9_FULL);
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ff0e 	bl	8000588 <EPD_2IN9_Init>
    EPD_2IN9_Clear();
 800076c:	f7ff ff80 	bl	8000670 <EPD_2IN9_Clear>
    EPD_2IN9_Display(Display);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <EPD_2in9_test+0x20>)
 8000772:	f7ff ffb1 	bl	80006d8 <EPD_2IN9_Display>
    return 0;
 8000776:	2300      	movs	r3, #0
}
 8000778:	4618      	mov	r0, r3
 800077a:	bd80      	pop	{r7, pc}
 800077c:	080056d0 	.word	0x080056d0

08000780 <changeImageTo>:
void changeImageTo(uint32_t imageToDisplay){
 8000780:	b5b0      	push	{r4, r5, r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	uint32_t* IMAGES[8] = {Display, Status, Menu, Bolus_wizard_1, Bolus_wizard_2, Sg_review, Sg_review_2, Settings};
 8000788:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <changeImageTo+0x38>)
 800078a:	f107 0408 	add.w	r4, r7, #8
 800078e:	461d      	mov	r5, r3
 8000790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000794:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  EPD_2IN9_Display(IMAGES[imageToDisplay]);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	3328      	adds	r3, #40	; 0x28
 80007a2:	443b      	add	r3, r7
 80007a4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff95 	bl	80006d8 <EPD_2IN9_Display>
}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	; 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bdb0      	pop	{r4, r5, r7, pc}
 80007b6:	bf00      	nop
 80007b8:	08005670 	.word	0x08005670

080007bc <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b46      	ldr	r3, [pc, #280]	; (80008ec <MX_GPIO_Init+0x130>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d8:	4a44      	ldr	r2, [pc, #272]	; (80008ec <MX_GPIO_Init+0x130>)
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e2:	4b42      	ldr	r3, [pc, #264]	; (80008ec <MX_GPIO_Init+0x130>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e8:	f003 0304 	and.w	r3, r3, #4
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f0:	4b3e      	ldr	r3, [pc, #248]	; (80008ec <MX_GPIO_Init+0x130>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f6:	4a3d      	ldr	r2, [pc, #244]	; (80008ec <MX_GPIO_Init+0x130>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000800:	4b3a      	ldr	r3, [pc, #232]	; (80008ec <MX_GPIO_Init+0x130>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b37      	ldr	r3, [pc, #220]	; (80008ec <MX_GPIO_Init+0x130>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	4a35      	ldr	r2, [pc, #212]	; (80008ec <MX_GPIO_Init+0x130>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081e:	4b33      	ldr	r3, [pc, #204]	; (80008ec <MX_GPIO_Init+0x130>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082c:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <MX_GPIO_Init+0x130>)
 800082e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000832:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <MX_GPIO_Init+0x130>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083c:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <MX_GPIO_Init+0x130>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	2101      	movs	r1, #1
 800084e:	4828      	ldr	r0, [pc, #160]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000850:	f000 ff22 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2108      	movs	r1, #8
 8000858:	4826      	ldr	r0, [pc, #152]	; (80008f4 <MX_GPIO_Init+0x138>)
 800085a:	f000 ff1d 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2110      	movs	r1, #16
 8000862:	4824      	ldr	r0, [pc, #144]	; (80008f4 <MX_GPIO_Init+0x138>)
 8000864:	f000 ff18 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Botton_Pin;
 8000868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_Botton_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	481c      	ldr	r0, [pc, #112]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000880:	f000 fd42 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000884:	2301      	movs	r3, #1
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4815      	ldr	r0, [pc, #84]	; (80008f0 <MX_GPIO_Init+0x134>)
 800089c:	f000 fd34 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008a0:	2308      	movs	r3, #8
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	480f      	ldr	r0, [pc, #60]	; (80008f0 <MX_GPIO_Init+0x134>)
 80008b4:	f000 fd28 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80008b8:	2318      	movs	r3, #24
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4809      	ldr	r0, [pc, #36]	; (80008f4 <MX_GPIO_Init+0x138>)
 80008d0:	f000 fd1a 	bl	8001308 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2101      	movs	r1, #1
 80008d8:	2028      	movs	r0, #40	; 0x28
 80008da:	f000 fce0 	bl	800129e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008de:	2028      	movs	r0, #40	; 0x28
 80008e0:	f000 fcf7 	bl	80012d2 <HAL_NVIC_EnableIRQ>
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
//   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	58024400 	.word	0x58024400
 80008f0:	58020800 	.word	0x58020800
 80008f4:	58020000 	.word	0x58020000

080008f8 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	80fb      	strh	r3, [r7, #6]
	if (pin == BUTTON_PIN){
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000908:	d102      	bne.n	8000910 <HAL_GPIO_EXTI_Callback+0x18>
		B1_Botton=1;
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <HAL_GPIO_EXTI_Callback+0x24>)
 800090c:	2201      	movs	r2, #1
 800090e:	601a      	str	r2, [r3, #0]
		  //update_display();
	}
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	24000090 	.word	0x24000090

08000920 <main>:


int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

  HAL_Init();
 8000926:	f000 fb1d 	bl	8000f64 <HAL_Init>


  SystemClock_Config();
 800092a:	f000 f821 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092e:	f7ff ff45 	bl	80007bc <MX_GPIO_Init>
  MX_SPI3_Init();
 8000932:	f000 f8a1 	bl	8000a78 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  EPD_2in9_test();
 8000936:	f7ff ff11 	bl	800075c <EPD_2in9_test>

 uint32_t imageCounter=0U;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 const uint32_t noOfImages=8U;
 800093e:	2308      	movs	r3, #8
 8000940:	603b      	str	r3, [r7, #0]

  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(B1_Botton==1){
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <main+0x4c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d1fb      	bne.n	8000942 <main+0x22>
		  B1_Botton=0;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <main+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
		  imageCounter++;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3301      	adds	r3, #1
 8000954:	607b      	str	r3, [r7, #4]
		  //changeImageTo(imageCounter);
		  if(imageCounter >= noOfImages)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	429a      	cmp	r2, r3
 800095c:	d301      	bcc.n	8000962 <main+0x42>
		     {
		     	imageCounter = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
		     }
		  changeImageTo(imageCounter);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ff0c 	bl	8000780 <changeImageTo>
	  if(B1_Botton==1){
 8000968:	e7eb      	b.n	8000942 <main+0x22>
 800096a:	bf00      	nop
 800096c:	24000090 	.word	0x24000090

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09c      	sub	sp, #112	; 0x70
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097a:	224c      	movs	r2, #76	; 0x4c
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f003 fe24 	bl	80045cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2220      	movs	r2, #32
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f003 fe1e 	bl	80045cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000990:	2002      	movs	r0, #2
 8000992:	f000 feb5 	bl	8001700 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <SystemClock_Config+0xf4>)
 800099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099e:	4a31      	ldr	r2, [pc, #196]	; (8000a64 <SystemClock_Config+0xf4>)
 80009a0:	f023 0301 	bic.w	r3, r3, #1
 80009a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009a6:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <SystemClock_Config+0xf4>)
 80009a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <SystemClock_Config+0xf8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b8:	4a2b      	ldr	r2, [pc, #172]	; (8000a68 <SystemClock_Config+0xf8>)
 80009ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <SystemClock_Config+0xf8>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009cc:	bf00      	nop
 80009ce:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <SystemClock_Config+0xf8>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009da:	d1f8      	bne.n	80009ce <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009dc:	2302      	movs	r3, #2
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e4:	2340      	movs	r3, #64	; 0x40
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e8:	2302      	movs	r3, #2
 80009ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ec:	2300      	movs	r3, #0
 80009ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f0:	2304      	movs	r3, #4
 80009f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80009f4:	2309      	movs	r3, #9
 80009f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009fc:	2304      	movs	r3, #4
 80009fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a04:	230c      	movs	r3, #12
 8000a06:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000a0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a10:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 feac 	bl	8001774 <HAL_RCC_OscConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a22:	f000 f823 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	233f      	movs	r3, #63	; 0x3f
 8000a28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2101      	movs	r1, #1
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 faec 	bl	8002028 <HAL_RCC_ClockConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a56:	f000 f809 	bl	8000a6c <Error_Handler>
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	3770      	adds	r7, #112	; 0x70
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	58000400 	.word	0x58000400
 8000a68:	58024800 	.word	0x58024800

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000a7c:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000a7e:	4a29      	ldr	r2, [pc, #164]	; (8000b24 <MX_SPI3_Init+0xac>)
 8000a80:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000a84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a88:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000a8a:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000a8c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000a90:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a92:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000a94:	2207      	movs	r2, #7
 8000a96:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000aa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000aaa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000aae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_SPI3_Init+0xa8>)
 8000b0c:	f003 f92a 	bl	8003d64 <HAL_SPI_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8000b16:	f7ff ffa9 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	24000094 	.word	0x24000094
 8000b24:	40003c00 	.word	0x40003c00

08000b28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b0ba      	sub	sp, #232	; 0xe8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	22c0      	movs	r2, #192	; 0xc0
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 fd3f 	bl	80045cc <memset>
  if(spiHandle->Instance==SPI3)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a30      	ldr	r2, [pc, #192]	; (8000c14 <HAL_SPI_MspInit+0xec>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d159      	bne.n	8000c0c <HAL_SPI_MspInit+0xe4>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000b58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b5c:	f04f 0300 	mov.w	r3, #0
 8000b60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f001 fd8b 	bl	8002688 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000b78:	f7ff ff78 	bl	8000a6c <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b7c:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <HAL_SPI_MspInit+0xf0>)
 8000b7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b82:	4a25      	ldr	r2, [pc, #148]	; (8000c18 <HAL_SPI_MspInit+0xf0>)
 8000b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <HAL_SPI_MspInit+0xf0>)
 8000b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <HAL_SPI_MspInit+0xf0>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <HAL_SPI_MspInit+0xf0>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <HAL_SPI_MspInit+0xf0>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd0:	2306      	movs	r3, #6
 8000bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480f      	ldr	r0, [pc, #60]	; (8000c1c <HAL_SPI_MspInit+0xf4>)
 8000bde:	f000 fb93 	bl	8001308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000be2:	2320      	movs	r3, #32
 8000be4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c04:	4619      	mov	r1, r3
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_SPI_MspInit+0xf4>)
 8000c08:	f000 fb7e 	bl	8001308 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	37e8      	adds	r7, #232	; 0xe8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40003c00 	.word	0x40003c00
 8000c18:	58024400 	.word	0x58024400
 8000c1c:	58020400 	.word	0x58020400

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_MspInit+0x30>)
 8000c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c2c:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x30>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x30>)
 8000c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	58024400 	.word	0x58024400

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca0:	f000 f9d2 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Botton_Pin);
 8000cac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cb0:	f000 fd0b 	bl	80016ca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	e00a      	b.n	8000ce0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cca:	f3af 8000 	nop.w
 8000cce:	4601      	mov	r1, r0
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	b2ca      	uxtb	r2, r1
 8000cd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbf0      	blt.n	8000cca <_read+0x12>
	}

return len;
 8000ce8:	687b      	ldr	r3, [r7, #4]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	e009      	b.n	8000d18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	60ba      	str	r2, [r7, #8]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbf1      	blt.n	8000d04 <_write+0x12>
	}
	return len;
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_close>:

int _close(int file)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
	return -1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d52:	605a      	str	r2, [r3, #4]
	return 0;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_isatty>:

int _isatty(int file)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
	return 1;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
	return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f003 fbd8 	bl	8004578 <__errno>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	24080000 	.word	0x24080000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	2400011c 	.word	0x2400011c
 8000dfc:	24000138 	.word	0x24000138

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e04:	4b37      	ldr	r3, [pc, #220]	; (8000ee4 <SystemInit+0xe4>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a36      	ldr	r2, [pc, #216]	; (8000ee4 <SystemInit+0xe4>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e14:	4b34      	ldr	r3, [pc, #208]	; (8000ee8 <SystemInit+0xe8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 030f 	and.w	r3, r3, #15
 8000e1c:	2b06      	cmp	r3, #6
 8000e1e:	d807      	bhi.n	8000e30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e20:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <SystemInit+0xe8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f023 030f 	bic.w	r3, r3, #15
 8000e28:	4a2f      	ldr	r2, [pc, #188]	; (8000ee8 <SystemInit+0xe8>)
 8000e2a:	f043 0307 	orr.w	r3, r3, #7
 8000e2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e30:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <SystemInit+0xec>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a2d      	ldr	r2, [pc, #180]	; (8000eec <SystemInit+0xec>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <SystemInit+0xec>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e42:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <SystemInit+0xec>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4929      	ldr	r1, [pc, #164]	; (8000eec <SystemInit+0xec>)
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <SystemInit+0xf0>)
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <SystemInit+0xe8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d007      	beq.n	8000e6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <SystemInit+0xe8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f023 030f 	bic.w	r3, r3, #15
 8000e62:	4a21      	ldr	r2, [pc, #132]	; (8000ee8 <SystemInit+0xe8>)
 8000e64:	f043 0307 	orr.w	r3, r3, #7
 8000e68:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <SystemInit+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <SystemInit+0xec>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <SystemInit+0xec>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <SystemInit+0xec>)
 8000e7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <SystemInit+0xf4>)
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <SystemInit+0xec>)
 8000e84:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <SystemInit+0xf8>)
 8000e86:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <SystemInit+0xec>)
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	; (8000efc <SystemInit+0xfc>)
 8000e8c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <SystemInit+0xec>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <SystemInit+0xec>)
 8000e96:	4a19      	ldr	r2, [pc, #100]	; (8000efc <SystemInit+0xfc>)
 8000e98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <SystemInit+0xec>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <SystemInit+0xec>)
 8000ea2:	4a16      	ldr	r2, [pc, #88]	; (8000efc <SystemInit+0xfc>)
 8000ea4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <SystemInit+0xec>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <SystemInit+0xec>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <SystemInit+0xec>)
 8000eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <SystemInit+0xec>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <SystemInit+0x100>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <SystemInit+0x104>)
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000eca:	d202      	bcs.n	8000ed2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <SystemInit+0x108>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <SystemInit+0x10c>)
 8000ed4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ed8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00
 8000ee8:	52002000 	.word	0x52002000
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ef4:	02020200 	.word	0x02020200
 8000ef8:	01ff0000 	.word	0x01ff0000
 8000efc:	01010280 	.word	0x01010280
 8000f00:	5c001000 	.word	0x5c001000
 8000f04:	ffff0000 	.word	0xffff0000
 8000f08:	51008108 	.word	0x51008108
 8000f0c:	52004000 	.word	0x52004000

08000f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f14:	f7ff ff74 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1a:	490d      	ldr	r1, [pc, #52]	; (8000f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f30:	4c0a      	ldr	r4, [pc, #40]	; (8000f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f003 fb21 	bl	8004584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f42:	f7ff fced 	bl	8000920 <main>
  bx  lr
 8000f46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f48:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f50:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000f54:	0800eb80 	.word	0x0800eb80
  ldr r2, =_sbss
 8000f58:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000f5c:	24000134 	.word	0x24000134

08000f60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC3_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f98c 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f70:	f001 fa10 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8000f74:	4602      	mov	r2, r0
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_Init+0x68>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	4913      	ldr	r1, [pc, #76]	; (8000fd0 <HAL_Init+0x6c>)
 8000f82:	5ccb      	ldrb	r3, [r1, r3]
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_Init+0x68>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <HAL_Init+0x6c>)
 8000f98:	5cd3      	ldrb	r3, [r2, r3]
 8000f9a:	f003 031f 	and.w	r3, r3, #31
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <HAL_Init+0x70>)
 8000fa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_Init+0x74>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f814 	bl	8000fdc <HAL_InitTick>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e002      	b.n	8000fc4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbe:	f7ff fe2f 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	0800ead0 	.word	0x0800ead0
 8000fd4:	24000004 	.word	0x24000004
 8000fd8:	24000000 	.word	0x24000000

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_InitTick+0x60>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e021      	b.n	8001034 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_InitTick+0x64>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_InitTick+0x60>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f971 	bl	80012ee <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 f93b 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x68>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2400000c 	.word	0x2400000c
 8001040:	24000000 	.word	0x24000000
 8001044:	24000008 	.word	0x24000008

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	2400000c 	.word	0x2400000c
 800106c:	24000120 	.word	0x24000120

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	24000120 	.word	0x24000120

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2400000c 	.word	0x2400000c

080010d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HAL_GetREVID+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	0c1b      	lsrs	r3, r3, #16
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	5c001000 	.word	0x5c001000

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <__NVIC_SetPriorityGrouping+0x40>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	4313      	orrs	r3, r2
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x40>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00
 800112c:	05fa0000 	.word	0x05fa0000

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4907      	ldr	r1, [pc, #28]	; (8001184 <__NVIC_EnableIRQ+0x38>)
 8001166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff8e 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff29 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff40 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff90 	bl	80011dc <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5f 	bl	8001188 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff33 	bl	800114c <__NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffa4 	bl	8001244 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001316:	4b89      	ldr	r3, [pc, #548]	; (800153c <HAL_GPIO_Init+0x234>)
 8001318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800131a:	e194      	b.n	8001646 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8186 	beq.w	8001640 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d005      	beq.n	800134c <HAL_GPIO_Init+0x44>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d130      	bne.n	80013ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001382:	2201      	movs	r2, #1
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	f003 0201 	and.w	r2, r3, #1
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d017      	beq.n	80013ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d123      	bne.n	800143e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	08da      	lsrs	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3208      	adds	r2, #8
 8001438:	69b9      	ldr	r1, [r7, #24]
 800143a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0203 	and.w	r2, r3, #3
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80e0 	beq.w	8001640 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001480:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <HAL_GPIO_Init+0x238>)
 8001482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001486:	4a2e      	ldr	r2, [pc, #184]	; (8001540 <HAL_GPIO_Init+0x238>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_GPIO_Init+0x238>)
 8001492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800149e:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_GPIO_Init+0x23c>)
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	3302      	adds	r3, #2
 80014a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a20      	ldr	r2, [pc, #128]	; (8001548 <HAL_GPIO_Init+0x240>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d052      	beq.n	8001570 <HAL_GPIO_Init+0x268>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a1f      	ldr	r2, [pc, #124]	; (800154c <HAL_GPIO_Init+0x244>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d031      	beq.n	8001536 <HAL_GPIO_Init+0x22e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <HAL_GPIO_Init+0x248>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d02b      	beq.n	8001532 <HAL_GPIO_Init+0x22a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_GPIO_Init+0x24c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d025      	beq.n	800152e <HAL_GPIO_Init+0x226>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <HAL_GPIO_Init+0x250>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01f      	beq.n	800152a <HAL_GPIO_Init+0x222>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a1b      	ldr	r2, [pc, #108]	; (800155c <HAL_GPIO_Init+0x254>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x21e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <HAL_GPIO_Init+0x258>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x21a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a19      	ldr	r2, [pc, #100]	; (8001564 <HAL_GPIO_Init+0x25c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x216>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a18      	ldr	r2, [pc, #96]	; (8001568 <HAL_GPIO_Init+0x260>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x212>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_GPIO_Init+0x264>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x20e>
 8001512:	2309      	movs	r3, #9
 8001514:	e02d      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001516:	230a      	movs	r3, #10
 8001518:	e02b      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800151a:	2308      	movs	r3, #8
 800151c:	e029      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800151e:	2307      	movs	r3, #7
 8001520:	e027      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001522:	2306      	movs	r3, #6
 8001524:	e025      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001526:	2305      	movs	r3, #5
 8001528:	e023      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800152a:	2304      	movs	r3, #4
 800152c:	e021      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800152e:	2303      	movs	r3, #3
 8001530:	e01f      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001532:	2302      	movs	r3, #2
 8001534:	e01d      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001536:	2301      	movs	r3, #1
 8001538:	e01b      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800153a:	bf00      	nop
 800153c:	58000080 	.word	0x58000080
 8001540:	58024400 	.word	0x58024400
 8001544:	58000400 	.word	0x58000400
 8001548:	58020000 	.word	0x58020000
 800154c:	58020400 	.word	0x58020400
 8001550:	58020800 	.word	0x58020800
 8001554:	58020c00 	.word	0x58020c00
 8001558:	58021000 	.word	0x58021000
 800155c:	58021400 	.word	0x58021400
 8001560:	58021800 	.word	0x58021800
 8001564:	58021c00 	.word	0x58021c00
 8001568:	58022000 	.word	0x58022000
 800156c:	58022400 	.word	0x58022400
 8001570:	2300      	movs	r3, #0
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	f002 0203 	and.w	r2, r2, #3
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	4093      	lsls	r3, r2
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001582:	4938      	ldr	r1, [pc, #224]	; (8001664 <HAL_GPIO_Init+0x35c>)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	3301      	adds	r3, #1
 8001644:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f ae63 	bne.w	800131c <HAL_GPIO_Init+0x14>
  }
}
 8001656:	bf00      	nop
 8001658:	bf00      	nop
 800165a:	3724      	adds	r7, #36	; 0x24
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	58000400 	.word	0x58000400

08001668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	e001      	b.n	800168a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
 80016a4:	4613      	mov	r3, r2
 80016a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a8:	787b      	ldrb	r3, [r7, #1]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80016b4:	e003      	b.n	80016be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	041a      	lsls	r2, r3, #16
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	619a      	str	r2, [r3, #24]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff f901 	bl	80008f8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_PWREx_ConfigSupply+0x70>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b04      	cmp	r3, #4
 8001712:	d00a      	beq.n	800172a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_PWREx_ConfigSupply+0x70>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	429a      	cmp	r2, r3
 8001720:	d001      	beq.n	8001726 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e01f      	b.n	8001766 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e01d      	b.n	8001766 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_PWREx_ConfigSupply+0x70>)
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	f023 0207 	bic.w	r2, r3, #7
 8001732:	490f      	ldr	r1, [pc, #60]	; (8001770 <HAL_PWREx_ConfigSupply+0x70>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4313      	orrs	r3, r2
 8001738:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800173a:	f7ff fc99 	bl	8001070 <HAL_GetTick>
 800173e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001740:	e009      	b.n	8001756 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001742:	f7ff fc95 	bl	8001070 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001750:	d901      	bls.n	8001756 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e007      	b.n	8001766 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_PWREx_ConfigSupply+0x70>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800175e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001762:	d1ee      	bne.n	8001742 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	58024800 	.word	0x58024800

08001774 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08c      	sub	sp, #48	; 0x30
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	f000 bc48 	b.w	8002018 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8088 	beq.w	80018a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001796:	4b99      	ldr	r3, [pc, #612]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017a0:	4b96      	ldr	r3, [pc, #600]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a8:	2b10      	cmp	r3, #16
 80017aa:	d007      	beq.n	80017bc <HAL_RCC_OscConfig+0x48>
 80017ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ae:	2b18      	cmp	r3, #24
 80017b0:	d111      	bne.n	80017d6 <HAL_RCC_OscConfig+0x62>
 80017b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d10c      	bne.n	80017d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	4b8f      	ldr	r3, [pc, #572]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d06d      	beq.n	80018a4 <HAL_RCC_OscConfig+0x130>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d169      	bne.n	80018a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	f000 bc21 	b.w	8002018 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017de:	d106      	bne.n	80017ee <HAL_RCC_OscConfig+0x7a>
 80017e0:	4b86      	ldr	r3, [pc, #536]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a85      	ldr	r2, [pc, #532]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80017e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e02e      	b.n	800184c <HAL_RCC_OscConfig+0xd8>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0x9c>
 80017f6:	4b81      	ldr	r3, [pc, #516]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a80      	ldr	r2, [pc, #512]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80017fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4b7e      	ldr	r3, [pc, #504]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a7d      	ldr	r2, [pc, #500]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e01d      	b.n	800184c <HAL_RCC_OscConfig+0xd8>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0xc0>
 800181a:	4b78      	ldr	r3, [pc, #480]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a77      	ldr	r2, [pc, #476]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b75      	ldr	r3, [pc, #468]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a74      	ldr	r2, [pc, #464]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e00b      	b.n	800184c <HAL_RCC_OscConfig+0xd8>
 8001834:	4b71      	ldr	r3, [pc, #452]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a70      	ldr	r2, [pc, #448]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 800183a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b6e      	ldr	r3, [pc, #440]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a6d      	ldr	r2, [pc, #436]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d013      	beq.n	800187c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff fc0c 	bl	8001070 <HAL_GetTick>
 8001858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff fc08 	bl	8001070 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e3d4      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800186e:	4b63      	ldr	r3, [pc, #396]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0xe8>
 800187a:	e014      	b.n	80018a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fbf8 	bl	8001070 <HAL_GetTick>
 8001880:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fbf4 	bl	8001070 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e3c0      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001896:	4b59      	ldr	r3, [pc, #356]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x110>
 80018a2:	e000      	b.n	80018a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80ca 	beq.w	8001a48 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018b4:	4b51      	ldr	r3, [pc, #324]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018be:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d007      	beq.n	80018da <HAL_RCC_OscConfig+0x166>
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	2b18      	cmp	r3, #24
 80018ce:	d156      	bne.n	800197e <HAL_RCC_OscConfig+0x20a>
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d151      	bne.n	800197e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018da:	4b48      	ldr	r3, [pc, #288]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d005      	beq.n	80018f2 <HAL_RCC_OscConfig+0x17e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e392      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018f2:	4b42      	ldr	r3, [pc, #264]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 0219 	bic.w	r2, r3, #25
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	493f      	ldr	r1, [pc, #252]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff fbb4 	bl	8001070 <HAL_GetTick>
 8001908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190c:	f7ff fbb0 	bl	8001070 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e37c      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192a:	f7ff fbd1 	bl	80010d0 <HAL_GetREVID>
 800192e:	4603      	mov	r3, r0
 8001930:	f241 0203 	movw	r2, #4099	; 0x1003
 8001934:	4293      	cmp	r3, r2
 8001936:	d817      	bhi.n	8001968 <HAL_RCC_OscConfig+0x1f4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	2b40      	cmp	r3, #64	; 0x40
 800193e:	d108      	bne.n	8001952 <HAL_RCC_OscConfig+0x1de>
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001948:	4a2c      	ldr	r2, [pc, #176]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 800194a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001950:	e07a      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	031b      	lsls	r3, r3, #12
 8001960:	4926      	ldr	r1, [pc, #152]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001966:	e06f      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	4921      	ldr	r1, [pc, #132]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197c:	e064      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d047      	beq.n	8001a16 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 0219 	bic.w	r2, r3, #25
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	491a      	ldr	r1, [pc, #104]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fb6a 	bl	8001070 <HAL_GetTick>
 800199c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff fb66 	bl	8001070 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e332      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	f7ff fb87 	bl	80010d0 <HAL_GetREVID>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d819      	bhi.n	8001a00 <HAL_RCC_OscConfig+0x28c>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b40      	cmp	r3, #64	; 0x40
 80019d2:	d108      	bne.n	80019e6 <HAL_RCC_OscConfig+0x272>
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80019de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e2:	6053      	str	r3, [r2, #4]
 80019e4:	e030      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	031b      	lsls	r3, r3, #12
 80019f4:	4901      	ldr	r1, [pc, #4]	; (80019fc <HAL_RCC_OscConfig+0x288>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
 80019fa:	e025      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
 80019fc:	58024400 	.word	0x58024400
 8001a00:	4b9a      	ldr	r3, [pc, #616]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	4997      	ldr	r1, [pc, #604]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
 8001a14:	e018      	b.n	8001a48 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a16:	4b95      	ldr	r3, [pc, #596]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a94      	ldr	r2, [pc, #592]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff fb25 	bl	8001070 <HAL_GetTick>
 8001a26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fb21 	bl	8001070 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e2ed      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a3c:	4b8b      	ldr	r3, [pc, #556]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80a9 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a56:	4b85      	ldr	r3, [pc, #532]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a60:	4b82      	ldr	r3, [pc, #520]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d007      	beq.n	8001a7c <HAL_RCC_OscConfig+0x308>
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2b18      	cmp	r3, #24
 8001a70:	d13a      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x374>
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d135      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a7c:	4b7b      	ldr	r3, [pc, #492]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_OscConfig+0x320>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b80      	cmp	r3, #128	; 0x80
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e2c1      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a94:	f7ff fb1c 	bl	80010d0 <HAL_GetREVID>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d817      	bhi.n	8001ad2 <HAL_RCC_OscConfig+0x35e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	2b20      	cmp	r3, #32
 8001aa8:	d108      	bne.n	8001abc <HAL_RCC_OscConfig+0x348>
 8001aaa:	4b70      	ldr	r3, [pc, #448]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ab2:	4a6e      	ldr	r2, [pc, #440]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ab8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aba:	e075      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001abc:	4b6b      	ldr	r3, [pc, #428]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	069b      	lsls	r3, r3, #26
 8001aca:	4968      	ldr	r1, [pc, #416]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ad0:	e06a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ad2:	4b66      	ldr	r3, [pc, #408]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	061b      	lsls	r3, r3, #24
 8001ae0:	4962      	ldr	r1, [pc, #392]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ae6:	e05f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d042      	beq.n	8001b76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001af0:	4b5e      	ldr	r3, [pc, #376]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a5d      	ldr	r2, [pc, #372]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff fab8 	bl	8001070 <HAL_GetTick>
 8001b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b04:	f7ff fab4 	bl	8001070 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e280      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b16:	4b55      	ldr	r3, [pc, #340]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b22:	f7ff fad5 	bl	80010d0 <HAL_GetREVID>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d817      	bhi.n	8001b60 <HAL_RCC_OscConfig+0x3ec>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d108      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3d6>
 8001b38:	4b4c      	ldr	r3, [pc, #304]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b40:	4a4a      	ldr	r2, [pc, #296]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b46:	6053      	str	r3, [r2, #4]
 8001b48:	e02e      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
 8001b4a:	4b48      	ldr	r3, [pc, #288]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	069b      	lsls	r3, r3, #26
 8001b58:	4944      	ldr	r1, [pc, #272]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
 8001b5e:	e023      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
 8001b60:	4b42      	ldr	r3, [pc, #264]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	493f      	ldr	r1, [pc, #252]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60cb      	str	r3, [r1, #12]
 8001b74:	e018      	b.n	8001ba8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b76:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a3c      	ldr	r2, [pc, #240]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff fa75 	bl	8001070 <HAL_GetTick>
 8001b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fa71 	bl	8001070 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e23d      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b9c:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d036      	beq.n	8001c22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d019      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc0:	4a2a      	ldr	r2, [pc, #168]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fa52 	bl	8001070 <HAL_GetTick>
 8001bcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fa4e 	bl	8001070 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e21a      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x45c>
 8001bee:	e018      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfc:	f7ff fa38 	bl	8001070 <HAL_GetTick>
 8001c00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff fa34 	bl	8001070 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e200      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d039      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d01c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a0c      	ldr	r2, [pc, #48]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001c3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c42:	f7ff fa15 	bl	8001070 <HAL_GetTick>
 8001c46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c4a:	f7ff fa11 	bl	8001070 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e1dd      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_RCC_OscConfig+0x4f8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x4d6>
 8001c68:	e01b      	b.n	8001ca2 <HAL_RCC_OscConfig+0x52e>
 8001c6a:	bf00      	nop
 8001c6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c70:	4b9b      	ldr	r3, [pc, #620]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a9a      	ldr	r2, [pc, #616]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f9f8 	bl	8001070 <HAL_GetTick>
 8001c80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c84:	f7ff f9f4 	bl	8001070 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1c0      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c96:	4b92      	ldr	r3, [pc, #584]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8081 	beq.w	8001db2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cb0:	4b8c      	ldr	r3, [pc, #560]	; (8001ee4 <HAL_RCC_OscConfig+0x770>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a8b      	ldr	r2, [pc, #556]	; (8001ee4 <HAL_RCC_OscConfig+0x770>)
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cbc:	f7ff f9d8 	bl	8001070 <HAL_GetTick>
 8001cc0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc4:	f7ff f9d4 	bl	8001070 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e1a0      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cd6:	4b83      	ldr	r3, [pc, #524]	; (8001ee4 <HAL_RCC_OscConfig+0x770>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d106      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x584>
 8001cea:	4b7d      	ldr	r3, [pc, #500]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	4a7c      	ldr	r2, [pc, #496]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf6:	e02d      	b.n	8001d54 <HAL_RCC_OscConfig+0x5e0>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10c      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5a6>
 8001d00:	4b77      	ldr	r3, [pc, #476]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d04:	4a76      	ldr	r2, [pc, #472]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0c:	4b74      	ldr	r3, [pc, #464]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	4a73      	ldr	r2, [pc, #460]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d12:	f023 0304 	bic.w	r3, r3, #4
 8001d16:	6713      	str	r3, [r2, #112]	; 0x70
 8001d18:	e01c      	b.n	8001d54 <HAL_RCC_OscConfig+0x5e0>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x5c8>
 8001d22:	4b6f      	ldr	r3, [pc, #444]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	4a6e      	ldr	r2, [pc, #440]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2e:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d32:	4a6b      	ldr	r2, [pc, #428]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0x5e0>
 8001d3c:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	4a67      	ldr	r2, [pc, #412]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	6713      	str	r3, [r2, #112]	; 0x70
 8001d48:	4b65      	ldr	r3, [pc, #404]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	4a64      	ldr	r2, [pc, #400]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d4e:	f023 0304 	bic.w	r3, r3, #4
 8001d52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d015      	beq.n	8001d88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f988 	bl	8001070 <HAL_GetTick>
 8001d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7ff f984 	bl	8001070 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e14e      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d7a:	4b59      	ldr	r3, [pc, #356]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0ee      	beq.n	8001d64 <HAL_RCC_OscConfig+0x5f0>
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff f972 	bl	8001070 <HAL_GetTick>
 8001d8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7ff f96e 	bl	8001070 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e138      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001da6:	4b4e      	ldr	r3, [pc, #312]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1ee      	bne.n	8001d90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 812d 	beq.w	8002016 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001dbc:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dc4:	2b18      	cmp	r3, #24
 8001dc6:	f000 80bd 	beq.w	8001f44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	f040 809e 	bne.w	8001f10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd4:	4b42      	ldr	r3, [pc, #264]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a41      	ldr	r2, [pc, #260]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff f946 	bl	8001070 <HAL_GetTick>
 8001de4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff f942 	bl	8001070 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e10e      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dfa:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e06:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e0a:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <HAL_RCC_OscConfig+0x774>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	4931      	ldr	r1, [pc, #196]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	628b      	str	r3, [r1, #40]	; 0x28
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	3b01      	subs	r3, #1
 8001e26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	025b      	lsls	r3, r3, #9
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	041b      	lsls	r3, r3, #16
 8001e3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	061b      	lsls	r3, r3, #24
 8001e4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e50:	4923      	ldr	r1, [pc, #140]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e56:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	4a21      	ldr	r2, [pc, #132]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <HAL_RCC_OscConfig+0x778>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e6e:	00d2      	lsls	r2, r2, #3
 8001e70:	491b      	ldr	r1, [pc, #108]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	f023 020c 	bic.w	r2, r3, #12
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4917      	ldr	r1, [pc, #92]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	f023 0202 	bic.w	r2, r3, #2
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	4912      	ldr	r1, [pc, #72]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec2:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_RCC_OscConfig+0x76c>)
 8001ed0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7ff f8cb 	bl	8001070 <HAL_GetTick>
 8001eda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001edc:	e011      	b.n	8001f02 <HAL_RCC_OscConfig+0x78e>
 8001ede:	bf00      	nop
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	58024800 	.word	0x58024800
 8001ee8:	fffffc0c 	.word	0xfffffc0c
 8001eec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7ff f8be 	bl	8001070 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e08a      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f02:	4b47      	ldr	r3, [pc, #284]	; (8002020 <HAL_RCC_OscConfig+0x8ac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x77c>
 8001f0e:	e082      	b.n	8002016 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f10:	4b43      	ldr	r3, [pc, #268]	; (8002020 <HAL_RCC_OscConfig+0x8ac>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a42      	ldr	r2, [pc, #264]	; (8002020 <HAL_RCC_OscConfig+0x8ac>)
 8001f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f8a8 	bl	8001070 <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f24:	f7ff f8a4 	bl	8001070 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e070      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f36:	4b3a      	ldr	r3, [pc, #232]	; (8002020 <HAL_RCC_OscConfig+0x8ac>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x7b0>
 8001f42:	e068      	b.n	8002016 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f44:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_RCC_OscConfig+0x8ac>)
 8001f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f4a:	4b35      	ldr	r3, [pc, #212]	; (8002020 <HAL_RCC_OscConfig+0x8ac>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d031      	beq.n	8001fbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f003 0203 	and.w	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d12a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d122      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d11a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	0a5b      	lsrs	r3, r3, #9
 8001f8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d111      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	0c1b      	lsrs	r3, r3, #16
 8001f9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d108      	bne.n	8001fbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	0e1b      	lsrs	r3, r3, #24
 8001fae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e02b      	b.n	8002018 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001fc0:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_RCC_OscConfig+0x8ac>)
 8001fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d01f      	beq.n	8002016 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_RCC_OscConfig+0x8ac>)
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	4a11      	ldr	r2, [pc, #68]	; (8002020 <HAL_RCC_OscConfig+0x8ac>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fe2:	f7ff f845 	bl	8001070 <HAL_GetTick>
 8001fe6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001fe8:	bf00      	nop
 8001fea:	f7ff f841 	bl	8001070 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d0f9      	beq.n	8001fea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_RCC_OscConfig+0x8ac>)
 8001ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_RCC_OscConfig+0x8b0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002002:	00d2      	lsls	r2, r2, #3
 8002004:	4906      	ldr	r1, [pc, #24]	; (8002020 <HAL_RCC_OscConfig+0x8ac>)
 8002006:	4313      	orrs	r3, r2
 8002008:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_RCC_OscConfig+0x8ac>)
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	4a04      	ldr	r2, [pc, #16]	; (8002020 <HAL_RCC_OscConfig+0x8ac>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3730      	adds	r7, #48	; 0x30
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	58024400 	.word	0x58024400
 8002024:	ffff0007 	.word	0xffff0007

08002028 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e19c      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800203c:	4b8a      	ldr	r3, [pc, #552]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d910      	bls.n	800206c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b87      	ldr	r3, [pc, #540]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 020f 	bic.w	r2, r3, #15
 8002052:	4985      	ldr	r1, [pc, #532]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b83      	ldr	r3, [pc, #524]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e184      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d010      	beq.n	800209a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	4b7b      	ldr	r3, [pc, #492]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002084:	429a      	cmp	r2, r3
 8002086:	d908      	bls.n	800209a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002088:	4b78      	ldr	r3, [pc, #480]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	4975      	ldr	r1, [pc, #468]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002096:	4313      	orrs	r3, r2
 8002098:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d010      	beq.n	80020c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	4b70      	ldr	r3, [pc, #448]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d908      	bls.n	80020c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020b6:	4b6d      	ldr	r3, [pc, #436]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	496a      	ldr	r1, [pc, #424]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d010      	beq.n	80020f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699a      	ldr	r2, [r3, #24]
 80020d8:	4b64      	ldr	r3, [pc, #400]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d908      	bls.n	80020f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020e4:	4b61      	ldr	r3, [pc, #388]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	495e      	ldr	r1, [pc, #376]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d010      	beq.n	8002124 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	4b59      	ldr	r3, [pc, #356]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800210e:	429a      	cmp	r2, r3
 8002110:	d908      	bls.n	8002124 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002112:	4b56      	ldr	r3, [pc, #344]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4953      	ldr	r1, [pc, #332]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002120:	4313      	orrs	r3, r2
 8002122:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d010      	beq.n	8002152 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	4b4d      	ldr	r3, [pc, #308]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	429a      	cmp	r2, r3
 800213e:	d908      	bls.n	8002152 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002140:	4b4a      	ldr	r3, [pc, #296]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f023 020f 	bic.w	r2, r3, #15
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4947      	ldr	r1, [pc, #284]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 800214e:	4313      	orrs	r3, r2
 8002150:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d055      	beq.n	800220a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800215e:	4b43      	ldr	r3, [pc, #268]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4940      	ldr	r1, [pc, #256]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 800216c:	4313      	orrs	r3, r2
 800216e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d107      	bne.n	8002188 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002178:	4b3c      	ldr	r3, [pc, #240]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d121      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0f6      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002190:	4b36      	ldr	r3, [pc, #216]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d115      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0ea      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021a8:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d109      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0de      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021b8:	4b2c      	ldr	r3, [pc, #176]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0d6      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021c8:	4b28      	ldr	r3, [pc, #160]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f023 0207 	bic.w	r2, r3, #7
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4925      	ldr	r1, [pc, #148]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021da:	f7fe ff49 	bl	8001070 <HAL_GetTick>
 80021de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e2:	f7fe ff45 	bl	8001070 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0be      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f8:	4b1c      	ldr	r3, [pc, #112]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	429a      	cmp	r2, r3
 8002208:	d1eb      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d010      	beq.n	8002238 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	429a      	cmp	r2, r3
 8002224:	d208      	bcs.n	8002238 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f023 020f 	bic.w	r2, r3, #15
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	490e      	ldr	r1, [pc, #56]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002234:	4313      	orrs	r3, r2
 8002236:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d214      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 020f 	bic.w	r2, r3, #15
 800224e:	4906      	ldr	r1, [pc, #24]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e086      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>
 8002268:	52002000 	.word	0x52002000
 800226c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d010      	beq.n	800229e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002288:	429a      	cmp	r2, r3
 800228a:	d208      	bcs.n	800229e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800228c:	4b3c      	ldr	r3, [pc, #240]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	4939      	ldr	r1, [pc, #228]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 800229a:	4313      	orrs	r3, r2
 800229c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d010      	beq.n	80022cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	4b34      	ldr	r3, [pc, #208]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d208      	bcs.n	80022cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022ba:	4b31      	ldr	r3, [pc, #196]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	492e      	ldr	r1, [pc, #184]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d010      	beq.n	80022fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d208      	bcs.n	80022fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4922      	ldr	r1, [pc, #136]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b00      	cmp	r3, #0
 8002304:	d010      	beq.n	8002328 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69da      	ldr	r2, [r3, #28]
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002312:	429a      	cmp	r2, r3
 8002314:	d208      	bcs.n	8002328 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002316:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4917      	ldr	r1, [pc, #92]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 8002324:	4313      	orrs	r3, r2
 8002326:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002328:	f000 f834 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 800232c:	4602      	mov	r2, r0
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	4912      	ldr	r1, [pc, #72]	; (8002384 <HAL_RCC_ClockConfig+0x35c>)
 800233a:	5ccb      	ldrb	r3, [r1, r3]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
 8002344:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <HAL_RCC_ClockConfig+0x35c>)
 8002350:	5cd3      	ldrb	r3, [r2, r3]
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <HAL_RCC_ClockConfig+0x360>)
 800235e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_RCC_ClockConfig+0x364>)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_ClockConfig+0x368>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fe36 	bl	8000fdc <HAL_InitTick>
 8002370:	4603      	mov	r3, r0
 8002372:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002374:	7bfb      	ldrb	r3, [r7, #15]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	58024400 	.word	0x58024400
 8002384:	0800ead0 	.word	0x0800ead0
 8002388:	24000004 	.word	0x24000004
 800238c:	24000000 	.word	0x24000000
 8002390:	24000008 	.word	0x24000008

08002394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	; 0x24
 8002398:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800239a:	4bb3      	ldr	r3, [pc, #716]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023a2:	2b18      	cmp	r3, #24
 80023a4:	f200 8155 	bhi.w	8002652 <HAL_RCC_GetSysClockFreq+0x2be>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	08002415 	.word	0x08002415
 80023b4:	08002653 	.word	0x08002653
 80023b8:	08002653 	.word	0x08002653
 80023bc:	08002653 	.word	0x08002653
 80023c0:	08002653 	.word	0x08002653
 80023c4:	08002653 	.word	0x08002653
 80023c8:	08002653 	.word	0x08002653
 80023cc:	08002653 	.word	0x08002653
 80023d0:	0800243b 	.word	0x0800243b
 80023d4:	08002653 	.word	0x08002653
 80023d8:	08002653 	.word	0x08002653
 80023dc:	08002653 	.word	0x08002653
 80023e0:	08002653 	.word	0x08002653
 80023e4:	08002653 	.word	0x08002653
 80023e8:	08002653 	.word	0x08002653
 80023ec:	08002653 	.word	0x08002653
 80023f0:	08002441 	.word	0x08002441
 80023f4:	08002653 	.word	0x08002653
 80023f8:	08002653 	.word	0x08002653
 80023fc:	08002653 	.word	0x08002653
 8002400:	08002653 	.word	0x08002653
 8002404:	08002653 	.word	0x08002653
 8002408:	08002653 	.word	0x08002653
 800240c:	08002653 	.word	0x08002653
 8002410:	08002447 	.word	0x08002447
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002414:	4b94      	ldr	r3, [pc, #592]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b00      	cmp	r3, #0
 800241e:	d009      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002420:	4b91      	ldr	r3, [pc, #580]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	08db      	lsrs	r3, r3, #3
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	4a90      	ldr	r2, [pc, #576]	; (800266c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
 8002430:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002432:	e111      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002434:	4b8d      	ldr	r3, [pc, #564]	; (800266c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002436:	61bb      	str	r3, [r7, #24]
      break;
 8002438:	e10e      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800243a:	4b8d      	ldr	r3, [pc, #564]	; (8002670 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800243c:	61bb      	str	r3, [r7, #24]
      break;
 800243e:	e10b      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002440:	4b8c      	ldr	r3, [pc, #560]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002442:	61bb      	str	r3, [r7, #24]
      break;
 8002444:	e108      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002446:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002450:	4b85      	ldr	r3, [pc, #532]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800245a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800245c:	4b82      	ldr	r3, [pc, #520]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002466:	4b80      	ldr	r3, [pc, #512]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	08db      	lsrs	r3, r3, #3
 800246c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80e1 	beq.w	800264c <HAL_RCC_GetSysClockFreq+0x2b8>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b02      	cmp	r3, #2
 800248e:	f000 8083 	beq.w	8002598 <HAL_RCC_GetSysClockFreq+0x204>
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b02      	cmp	r3, #2
 8002496:	f200 80a1 	bhi.w	80025dc <HAL_RCC_GetSysClockFreq+0x248>
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x114>
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d056      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x1c0>
 80024a6:	e099      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024a8:	4b6f      	ldr	r3, [pc, #444]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d02d      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024b4:	4b6c      	ldr	r3, [pc, #432]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	08db      	lsrs	r3, r3, #3
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	4a6b      	ldr	r2, [pc, #428]	; (800266c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
 80024c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024de:	4b62      	ldr	r3, [pc, #392]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80024f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002678 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800250e:	e087      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800267c <HAL_RCC_GetSysClockFreq+0x2e8>
 800251e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002522:	4b51      	ldr	r3, [pc, #324]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252a:	ee07 3a90 	vmov	s15, r3
 800252e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002532:	ed97 6a02 	vldr	s12, [r7, #8]
 8002536:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002678 <HAL_RCC_GetSysClockFreq+0x2e4>
 800253a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800253e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800254a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002552:	e065      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800255e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002680 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002566:	4b40      	ldr	r3, [pc, #256]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002576:	ed97 6a02 	vldr	s12, [r7, #8]
 800257a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002678 <HAL_RCC_GetSysClockFreq+0x2e4>
 800257e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800258a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800258e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002592:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002596:	e043      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002684 <HAL_RCC_GetSysClockFreq+0x2f0>
 80025a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025aa:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80025be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002678 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025da:	e021      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002680 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ee:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002602:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002678 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800260a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800260e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800261e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	0a5b      	lsrs	r3, r3, #9
 8002626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800262a:	3301      	adds	r3, #1
 800262c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	ee07 3a90 	vmov	s15, r3
 8002634:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002638:	edd7 6a07 	vldr	s13, [r7, #28]
 800263c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002644:	ee17 3a90 	vmov	r3, s15
 8002648:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800264a:	e005      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
      break;
 8002650:	e002      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002654:	61bb      	str	r3, [r7, #24]
      break;
 8002656:	bf00      	nop
  }

  return sysclockfreq;
 8002658:	69bb      	ldr	r3, [r7, #24]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3724      	adds	r7, #36	; 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	58024400 	.word	0x58024400
 800266c:	03d09000 	.word	0x03d09000
 8002670:	003d0900 	.word	0x003d0900
 8002674:	007a1200 	.word	0x007a1200
 8002678:	46000000 	.word	0x46000000
 800267c:	4c742400 	.word	0x4c742400
 8002680:	4a742400 	.word	0x4a742400
 8002684:	4af42400 	.word	0x4af42400

08002688 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800268c:	b0ca      	sub	sp, #296	; 0x128
 800268e:	af00      	add	r7, sp, #0
 8002690:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002694:	2300      	movs	r3, #0
 8002696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800269a:	2300      	movs	r3, #0
 800269c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80026ac:	2500      	movs	r5, #0
 80026ae:	ea54 0305 	orrs.w	r3, r4, r5
 80026b2:	d049      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80026b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026be:	d02f      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80026c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026c4:	d828      	bhi.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ca:	d01a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026d0:	d822      	bhi.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026da:	d007      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026dc:	e01c      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026de:	4bb8      	ldr	r3, [pc, #736]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	4ab7      	ldr	r2, [pc, #732]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80026ea:	e01a      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026f0:	3308      	adds	r3, #8
 80026f2:	2102      	movs	r1, #2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f001 f9d1 	bl	8003a9c <RCCEx_PLL2_Config>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002700:	e00f      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002706:	3328      	adds	r3, #40	; 0x28
 8002708:	2102      	movs	r1, #2
 800270a:	4618      	mov	r0, r3
 800270c:	f001 fa78 	bl	8003c00 <RCCEx_PLL3_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002716:	e004      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800271e:	e000      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800272a:	4ba5      	ldr	r3, [pc, #660]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800272c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002738:	4aa1      	ldr	r2, [pc, #644]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800273a:	430b      	orrs	r3, r1
 800273c:	6513      	str	r3, [r2, #80]	; 0x50
 800273e:	e003      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002740:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002744:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002754:	f04f 0900 	mov.w	r9, #0
 8002758:	ea58 0309 	orrs.w	r3, r8, r9
 800275c:	d047      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800275e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	2b04      	cmp	r3, #4
 8002766:	d82a      	bhi.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002768:	a201      	add	r2, pc, #4	; (adr r2, 8002770 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276e:	bf00      	nop
 8002770:	08002785 	.word	0x08002785
 8002774:	08002793 	.word	0x08002793
 8002778:	080027a9 	.word	0x080027a9
 800277c:	080027c7 	.word	0x080027c7
 8002780:	080027c7 	.word	0x080027c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002784:	4b8e      	ldr	r3, [pc, #568]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	4a8d      	ldr	r2, [pc, #564]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800278a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002790:	e01a      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002796:	3308      	adds	r3, #8
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f001 f97e 	bl	8003a9c <RCCEx_PLL2_Config>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027a6:	e00f      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027ac:	3328      	adds	r3, #40	; 0x28
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f001 fa25 	bl	8003c00 <RCCEx_PLL3_Config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027bc:	e004      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80027c4:	e000      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80027c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027d0:	4b7b      	ldr	r3, [pc, #492]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d4:	f023 0107 	bic.w	r1, r3, #7
 80027d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	4a78      	ldr	r2, [pc, #480]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027e0:	430b      	orrs	r3, r1
 80027e2:	6513      	str	r3, [r2, #80]	; 0x50
 80027e4:	e003      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80027ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80027fa:	f04f 0b00 	mov.w	fp, #0
 80027fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8002802:	d04c      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280e:	d030      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002814:	d829      	bhi.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002816:	2bc0      	cmp	r3, #192	; 0xc0
 8002818:	d02d      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800281a:	2bc0      	cmp	r3, #192	; 0xc0
 800281c:	d825      	bhi.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800281e:	2b80      	cmp	r3, #128	; 0x80
 8002820:	d018      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d821      	bhi.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d007      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800282e:	e01c      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002830:	4b63      	ldr	r3, [pc, #396]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	4a62      	ldr	r2, [pc, #392]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800283c:	e01c      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800283e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002842:	3308      	adds	r3, #8
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f001 f928 	bl	8003a9c <RCCEx_PLL2_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002852:	e011      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002858:	3328      	adds	r3, #40	; 0x28
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f001 f9cf 	bl	8003c00 <RCCEx_PLL3_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002868:	e006      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002870:	e002      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002872:	bf00      	nop
 8002874:	e000      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002878:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10a      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002880:	4b4f      	ldr	r3, [pc, #316]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002884:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800288c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288e:	4a4c      	ldr	r2, [pc, #304]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002890:	430b      	orrs	r3, r1
 8002892:	6513      	str	r3, [r2, #80]	; 0x50
 8002894:	e003      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800289a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800289e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80028aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80028b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80028b8:	460b      	mov	r3, r1
 80028ba:	4313      	orrs	r3, r2
 80028bc:	d053      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80028be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028ca:	d035      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80028cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028d0:	d82e      	bhi.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80028d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028d6:	d031      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80028d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028dc:	d828      	bhi.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80028de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e2:	d01a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80028e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e8:	d822      	bhi.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80028ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028f2:	d007      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80028f4:	e01c      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028f6:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002900:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002902:	e01c      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002908:	3308      	adds	r3, #8
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f001 f8c5 	bl	8003a9c <RCCEx_PLL2_Config>
 8002912:	4603      	mov	r3, r0
 8002914:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002918:	e011      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800291a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800291e:	3328      	adds	r3, #40	; 0x28
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f001 f96c 	bl	8003c00 <RCCEx_PLL3_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800292e:	e006      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002936:	e002      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002938:	bf00      	nop
 800293a:	e000      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800293c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800293e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10b      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800294e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002952:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002956:	4a1a      	ldr	r2, [pc, #104]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002958:	430b      	orrs	r3, r1
 800295a:	6593      	str	r3, [r2, #88]	; 0x58
 800295c:	e003      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800295e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002962:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002972:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800297c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002980:	460b      	mov	r3, r1
 8002982:	4313      	orrs	r3, r2
 8002984:	d056      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800298a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800298e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002992:	d038      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002998:	d831      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800299a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800299e:	d034      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80029a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029a4:	d82b      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029aa:	d01d      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80029ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029b0:	d825      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d006      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80029b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80029bc:	e01f      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80029be:	bf00      	nop
 80029c0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c4:	4ba2      	ldr	r3, [pc, #648]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	4aa1      	ldr	r2, [pc, #644]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029d0:	e01c      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029d6:	3308      	adds	r3, #8
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f001 f85e 	bl	8003a9c <RCCEx_PLL2_Config>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80029e6:	e011      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029ec:	3328      	adds	r3, #40	; 0x28
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f001 f905 	bl	8003c00 <RCCEx_PLL3_Config>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029fc:	e006      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a04:	e002      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a06:	bf00      	nop
 8002a08:	e000      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a14:	4b8e      	ldr	r3, [pc, #568]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a24:	4a8a      	ldr	r2, [pc, #552]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a26:	430b      	orrs	r3, r1
 8002a28:	6593      	str	r3, [r2, #88]	; 0x58
 8002a2a:	e003      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002a40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002a4a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4313      	orrs	r3, r2
 8002a52:	d03a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	2b30      	cmp	r3, #48	; 0x30
 8002a5c:	d01f      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002a5e:	2b30      	cmp	r3, #48	; 0x30
 8002a60:	d819      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d00c      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d815      	bhi.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d019      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d111      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a72:	4b77      	ldr	r3, [pc, #476]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	4a76      	ldr	r2, [pc, #472]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002a7e:	e011      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a84:	3308      	adds	r3, #8
 8002a86:	2102      	movs	r1, #2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f001 f807 	bl	8003a9c <RCCEx_PLL2_Config>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002a94:	e006      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a9c:	e002      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002a9e:	bf00      	nop
 8002aa0:	e000      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10a      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002aac:	4b68      	ldr	r3, [pc, #416]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	4a65      	ldr	r2, [pc, #404]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002abc:	430b      	orrs	r3, r1
 8002abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac0:	e003      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ac6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002ad6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002ae0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	d051      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002af4:	d035      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002af6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002afa:	d82e      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002afc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b00:	d031      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002b02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b06:	d828      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0c:	d01a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b12:	d822      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1c:	d007      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002b1e:	e01c      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b20:	4b4b      	ldr	r3, [pc, #300]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	4a4a      	ldr	r2, [pc, #296]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b2c:	e01c      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b32:	3308      	adds	r3, #8
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 ffb0 	bl	8003a9c <RCCEx_PLL2_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b42:	e011      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b48:	3328      	adds	r3, #40	; 0x28
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 f857 	bl	8003c00 <RCCEx_PLL3_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b58:	e006      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b60:	e002      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002b62:	bf00      	nop
 8002b64:	e000      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b70:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b74:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7e:	4a34      	ldr	r2, [pc, #208]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b80:	430b      	orrs	r3, r1
 8002b82:	6513      	str	r3, [r2, #80]	; 0x50
 8002b84:	e003      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b96:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002ba4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4313      	orrs	r3, r2
 8002bac:	d056      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb8:	d033      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002bba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bbe:	d82c      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002bc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bc4:	d02f      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002bc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bca:	d826      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002bcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bd0:	d02b      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002bd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bd6:	d820      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bdc:	d012      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002be2:	d81a      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d022      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bec:	d115      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bf2:	3308      	adds	r3, #8
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 ff50 	bl	8003a9c <RCCEx_PLL2_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c02:	e015      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c08:	3328      	adds	r3, #40	; 0x28
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fff7 	bl	8003c00 <RCCEx_PLL3_Config>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c18:	e00a      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c20:	e006      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c22:	bf00      	nop
 8002c24:	e004      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c26:	bf00      	nop
 8002c28:	e002      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c2a:	bf00      	nop
 8002c2c:	e000      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10d      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c46:	4a02      	ldr	r2, [pc, #8]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	6513      	str	r3, [r2, #80]	; 0x50
 8002c4c:	e006      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002c4e:	bf00      	nop
 8002c50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002c68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c72:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	d055      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c88:	d033      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c8e:	d82c      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d02f      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d826      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ca0:	d02b      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002ca2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ca6:	d820      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cac:	d012      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cb2:	d81a      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d022      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cbc:	d115      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fee8 	bl	8003a9c <RCCEx_PLL2_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002cd2:	e015      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cd8:	3328      	adds	r3, #40	; 0x28
 8002cda:	2101      	movs	r1, #1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 ff8f 	bl	8003c00 <RCCEx_PLL3_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cf0:	e006      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002cf2:	bf00      	nop
 8002cf4:	e004      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002cf6:	bf00      	nop
 8002cf8:	e002      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002cfa:	bf00      	nop
 8002cfc:	e000      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10b      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d08:	4ba3      	ldr	r3, [pc, #652]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d18:	4a9f      	ldr	r2, [pc, #636]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d1e:	e003      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d30:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002d3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d42:	460b      	mov	r3, r1
 8002d44:	4313      	orrs	r3, r2
 8002d46:	d037      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d52:	d00e      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d58:	d816      	bhi.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d018      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d62:	d111      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d64:	4b8c      	ldr	r3, [pc, #560]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	4a8b      	ldr	r2, [pc, #556]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d70:	e00f      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d76:	3308      	adds	r3, #8
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fe8e 	bl	8003a9c <RCCEx_PLL2_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d86:	e004      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d8e:	e000      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d9a:	4b7f      	ldr	r3, [pc, #508]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4a7b      	ldr	r2, [pc, #492]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002daa:	430b      	orrs	r3, r1
 8002dac:	6513      	str	r3, [r2, #80]	; 0x50
 8002dae:	e003      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002db4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002dce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	d039      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d81c      	bhi.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002de2:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002e25 	.word	0x08002e25
 8002dec:	08002df9 	.word	0x08002df9
 8002df0:	08002e07 	.word	0x08002e07
 8002df4:	08002e25 	.word	0x08002e25
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df8:	4b67      	ldr	r3, [pc, #412]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	4a66      	ldr	r2, [pc, #408]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e04:	e00f      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e0a:	3308      	adds	r3, #8
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fe44 	bl	8003a9c <RCCEx_PLL2_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e1a:	e004      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e22:	e000      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e2e:	4b5a      	ldr	r3, [pc, #360]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e32:	f023 0103 	bic.w	r1, r3, #3
 8002e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3c:	4a56      	ldr	r2, [pc, #344]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e42:	e003      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002e58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002e66:	460b      	mov	r3, r1
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f000 809f 	beq.w	8002fac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e6e:	4b4b      	ldr	r3, [pc, #300]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a4a      	ldr	r2, [pc, #296]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e7a:	f7fe f8f9 	bl	8001070 <HAL_GetTick>
 8002e7e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e82:	e00b      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e84:	f7fe f8f4 	bl	8001070 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b64      	cmp	r3, #100	; 0x64
 8002e92:	d903      	bls.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e9a:	e005      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e9c:	4b3f      	ldr	r3, [pc, #252]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ed      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d179      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002eb0:	4b39      	ldr	r3, [pc, #228]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ebc:	4053      	eors	r3, r2
 8002ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d015      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ec6:	4b34      	ldr	r3, [pc, #208]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ece:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ed2:	4b31      	ldr	r3, [pc, #196]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a30      	ldr	r2, [pc, #192]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ede:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a2d      	ldr	r2, [pc, #180]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002eea:	4a2b      	ldr	r2, [pc, #172]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ef0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ef6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efe:	d118      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe f8b6 	bl	8001070 <HAL_GetTick>
 8002f04:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f08:	e00d      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fe f8b1 	bl	8001070 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f14:	1ad2      	subs	r2, r2, r3
 8002f16:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d903      	bls.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002f24:	e005      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f26:	4b1c      	ldr	r3, [pc, #112]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0eb      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002f32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d129      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f4a:	d10e      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002f4c:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f5c:	091a      	lsrs	r2, r3, #4
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	4a0d      	ldr	r2, [pc, #52]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6113      	str	r3, [r2, #16]
 8002f68:	e005      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f74:	6113      	str	r3, [r2, #16]
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f78:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f86:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8c:	e00e      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8002f96:	e009      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002f98:	58024400 	.word	0x58024400
 8002f9c:	58024800 	.word	0x58024800
 8002fa0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f002 0301 	and.w	r3, r2, #1
 8002fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fc2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f000 8089 	beq.w	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd4:	2b28      	cmp	r3, #40	; 0x28
 8002fd6:	d86b      	bhi.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002fd8:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fde:	bf00      	nop
 8002fe0:	080030b9 	.word	0x080030b9
 8002fe4:	080030b1 	.word	0x080030b1
 8002fe8:	080030b1 	.word	0x080030b1
 8002fec:	080030b1 	.word	0x080030b1
 8002ff0:	080030b1 	.word	0x080030b1
 8002ff4:	080030b1 	.word	0x080030b1
 8002ff8:	080030b1 	.word	0x080030b1
 8002ffc:	080030b1 	.word	0x080030b1
 8003000:	08003085 	.word	0x08003085
 8003004:	080030b1 	.word	0x080030b1
 8003008:	080030b1 	.word	0x080030b1
 800300c:	080030b1 	.word	0x080030b1
 8003010:	080030b1 	.word	0x080030b1
 8003014:	080030b1 	.word	0x080030b1
 8003018:	080030b1 	.word	0x080030b1
 800301c:	080030b1 	.word	0x080030b1
 8003020:	0800309b 	.word	0x0800309b
 8003024:	080030b1 	.word	0x080030b1
 8003028:	080030b1 	.word	0x080030b1
 800302c:	080030b1 	.word	0x080030b1
 8003030:	080030b1 	.word	0x080030b1
 8003034:	080030b1 	.word	0x080030b1
 8003038:	080030b1 	.word	0x080030b1
 800303c:	080030b1 	.word	0x080030b1
 8003040:	080030b9 	.word	0x080030b9
 8003044:	080030b1 	.word	0x080030b1
 8003048:	080030b1 	.word	0x080030b1
 800304c:	080030b1 	.word	0x080030b1
 8003050:	080030b1 	.word	0x080030b1
 8003054:	080030b1 	.word	0x080030b1
 8003058:	080030b1 	.word	0x080030b1
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b9 	.word	0x080030b9
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030b1 	.word	0x080030b1
 800306c:	080030b1 	.word	0x080030b1
 8003070:	080030b1 	.word	0x080030b1
 8003074:	080030b1 	.word	0x080030b1
 8003078:	080030b1 	.word	0x080030b1
 800307c:	080030b1 	.word	0x080030b1
 8003080:	080030b9 	.word	0x080030b9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003088:	3308      	adds	r3, #8
 800308a:	2101      	movs	r1, #1
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fd05 	bl	8003a9c <RCCEx_PLL2_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003098:	e00f      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800309a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800309e:	3328      	adds	r3, #40	; 0x28
 80030a0:	2101      	movs	r1, #1
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fdac 	bl	8003c00 <RCCEx_PLL3_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030ae:	e004      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030b6:	e000      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80030b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80030c2:	4bbf      	ldr	r3, [pc, #764]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d0:	4abb      	ldr	r2, [pc, #748]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030d2:	430b      	orrs	r3, r1
 80030d4:	6553      	str	r3, [r2, #84]	; 0x54
 80030d6:	e003      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80030e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e8:	f002 0302 	and.w	r3, r2, #2
 80030ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030f0:	2300      	movs	r3, #0
 80030f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80030f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80030fa:	460b      	mov	r3, r1
 80030fc:	4313      	orrs	r3, r2
 80030fe:	d041      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003106:	2b05      	cmp	r3, #5
 8003108:	d824      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800310a:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	0800315d 	.word	0x0800315d
 8003114:	08003129 	.word	0x08003129
 8003118:	0800313f 	.word	0x0800313f
 800311c:	0800315d 	.word	0x0800315d
 8003120:	0800315d 	.word	0x0800315d
 8003124:	0800315d 	.word	0x0800315d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800312c:	3308      	adds	r3, #8
 800312e:	2101      	movs	r1, #1
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fcb3 	bl	8003a9c <RCCEx_PLL2_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800313c:	e00f      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800313e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003142:	3328      	adds	r3, #40	; 0x28
 8003144:	2101      	movs	r1, #1
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fd5a 	bl	8003c00 <RCCEx_PLL3_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003152:	e004      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800315a:	e000      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800315c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800315e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003166:	4b96      	ldr	r3, [pc, #600]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	f023 0107 	bic.w	r1, r3, #7
 800316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003174:	4a92      	ldr	r2, [pc, #584]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003176:	430b      	orrs	r3, r1
 8003178:	6553      	str	r3, [r2, #84]	; 0x54
 800317a:	e003      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003180:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	f002 0304 	and.w	r3, r2, #4
 8003190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003194:	2300      	movs	r3, #0
 8003196:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800319a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800319e:	460b      	mov	r3, r1
 80031a0:	4313      	orrs	r3, r2
 80031a2:	d044      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80031a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d825      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	08003205 	.word	0x08003205
 80031bc:	080031d1 	.word	0x080031d1
 80031c0:	080031e7 	.word	0x080031e7
 80031c4:	08003205 	.word	0x08003205
 80031c8:	08003205 	.word	0x08003205
 80031cc:	08003205 	.word	0x08003205
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031d4:	3308      	adds	r3, #8
 80031d6:	2101      	movs	r1, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fc5f 	bl	8003a9c <RCCEx_PLL2_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80031e4:	e00f      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031ea:	3328      	adds	r3, #40	; 0x28
 80031ec:	2101      	movs	r1, #1
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fd06 	bl	8003c00 <RCCEx_PLL3_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80031fa:	e004      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003202:	e000      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10b      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800320e:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	f023 0107 	bic.w	r1, r3, #7
 8003216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800321a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800321e:	4a68      	ldr	r2, [pc, #416]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003220:	430b      	orrs	r3, r1
 8003222:	6593      	str	r3, [r2, #88]	; 0x58
 8003224:	e003      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800322a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800322e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003236:	f002 0320 	and.w	r3, r2, #32
 800323a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800323e:	2300      	movs	r3, #0
 8003240:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003244:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003248:	460b      	mov	r3, r1
 800324a:	4313      	orrs	r3, r2
 800324c:	d055      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800324e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800325a:	d033      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800325c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003260:	d82c      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003266:	d02f      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326c:	d826      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800326e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003272:	d02b      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003274:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003278:	d820      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800327a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800327e:	d012      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003284:	d81a      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d022      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800328a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800328e:	d115      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003294:	3308      	adds	r3, #8
 8003296:	2100      	movs	r1, #0
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fbff 	bl	8003a9c <RCCEx_PLL2_Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032a4:	e015      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032aa:	3328      	adds	r3, #40	; 0x28
 80032ac:	2102      	movs	r1, #2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fca6 	bl	8003c00 <RCCEx_PLL3_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032ba:	e00a      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032c2:	e006      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032c4:	bf00      	nop
 80032c6:	e004      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032c8:	bf00      	nop
 80032ca:	e002      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032cc:	bf00      	nop
 80032ce:	e000      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80032d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10b      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032da:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80032e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	4a35      	ldr	r2, [pc, #212]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6553      	str	r3, [r2, #84]	; 0x54
 80032f0:	e003      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80032fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800330a:	2300      	movs	r3, #0
 800330c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003310:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003314:	460b      	mov	r3, r1
 8003316:	4313      	orrs	r3, r2
 8003318:	d058      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800331a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800331e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003322:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003326:	d033      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003328:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800332c:	d82c      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800332e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003332:	d02f      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003338:	d826      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800333a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800333e:	d02b      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003344:	d820      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800334a:	d012      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800334c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003350:	d81a      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d022      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335a:	d115      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003360:	3308      	adds	r3, #8
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fb99 	bl	8003a9c <RCCEx_PLL2_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003370:	e015      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003376:	3328      	adds	r3, #40	; 0x28
 8003378:	2102      	movs	r1, #2
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fc40 	bl	8003c00 <RCCEx_PLL3_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003386:	e00a      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800338e:	e006      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003390:	bf00      	nop
 8003392:	e004      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003394:	bf00      	nop
 8003396:	e002      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003398:	bf00      	nop
 800339a:	e000      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800339c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10e      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b6:	4a02      	ldr	r2, [pc, #8]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6593      	str	r3, [r2, #88]	; 0x58
 80033bc:	e006      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80033be:	bf00      	nop
 80033c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80033d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033dc:	2300      	movs	r3, #0
 80033de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80033e6:	460b      	mov	r3, r1
 80033e8:	4313      	orrs	r3, r2
 80033ea:	d055      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80033ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033f8:	d033      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80033fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033fe:	d82c      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003404:	d02f      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340a:	d826      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800340c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003410:	d02b      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003412:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003416:	d820      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341c:	d012      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800341e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003422:	d81a      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d022      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800342c:	d115      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003432:	3308      	adds	r3, #8
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fb30 	bl	8003a9c <RCCEx_PLL2_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003442:	e015      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003448:	3328      	adds	r3, #40	; 0x28
 800344a:	2102      	movs	r1, #2
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fbd7 	bl	8003c00 <RCCEx_PLL3_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003458:	e00a      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003460:	e006      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003462:	bf00      	nop
 8003464:	e004      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003466:	bf00      	nop
 8003468:	e002      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800346a:	bf00      	nop
 800346c:	e000      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800346e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003478:	4ba1      	ldr	r3, [pc, #644]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003484:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003488:	4a9d      	ldr	r2, [pc, #628]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800348a:	430b      	orrs	r3, r1
 800348c:	6593      	str	r3, [r2, #88]	; 0x58
 800348e:	e003      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003494:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f002 0308 	and.w	r3, r2, #8
 80034a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034a8:	2300      	movs	r3, #0
 80034aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80034b2:	460b      	mov	r3, r1
 80034b4:	4313      	orrs	r3, r2
 80034b6:	d01e      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80034b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ca:	3328      	adds	r3, #40	; 0x28
 80034cc:	2102      	movs	r1, #2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fb96 	bl	8003c00 <RCCEx_PLL3_Config>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80034e0:	4b87      	ldr	r3, [pc, #540]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f0:	4a83      	ldr	r2, [pc, #524]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034f2:	430b      	orrs	r3, r1
 80034f4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	f002 0310 	and.w	r3, r2, #16
 8003502:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003506:	2300      	movs	r3, #0
 8003508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800350c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003510:	460b      	mov	r3, r1
 8003512:	4313      	orrs	r3, r2
 8003514:	d01e      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800351a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800351e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003522:	d10c      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003528:	3328      	adds	r3, #40	; 0x28
 800352a:	2102      	movs	r1, #2
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fb67 	bl	8003c00 <RCCEx_PLL3_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800353e:	4b70      	ldr	r3, [pc, #448]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800354e:	4a6c      	ldr	r2, [pc, #432]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003550:	430b      	orrs	r3, r1
 8003552:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003560:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800356a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800356e:	460b      	mov	r3, r1
 8003570:	4313      	orrs	r3, r2
 8003572:	d03e      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003578:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800357c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003580:	d022      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003586:	d81b      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d00b      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003592:	e015      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003598:	3308      	adds	r3, #8
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fa7d 	bl	8003a9c <RCCEx_PLL2_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035a8:	e00f      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ae:	3328      	adds	r3, #40	; 0x28
 80035b0:	2102      	movs	r1, #2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fb24 	bl	8003c00 <RCCEx_PLL3_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035be:	e004      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035c6:	e000      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80035c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10b      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035d2:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035e2:	4a47      	ldr	r2, [pc, #284]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035e4:	430b      	orrs	r3, r1
 80035e6:	6593      	str	r3, [r2, #88]	; 0x58
 80035e8:	e003      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80035fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003600:	2300      	movs	r3, #0
 8003602:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003604:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003608:	460b      	mov	r3, r1
 800360a:	4313      	orrs	r3, r2
 800360c:	d03b      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800360e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003616:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800361a:	d01f      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800361c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003620:	d818      	bhi.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003626:	d003      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800362c:	d007      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800362e:	e011      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003630:	4b33      	ldr	r3, [pc, #204]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	4a32      	ldr	r2, [pc, #200]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800363c:	e00f      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800363e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003642:	3328      	adds	r3, #40	; 0x28
 8003644:	2101      	movs	r1, #1
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fada 	bl	8003c00 <RCCEx_PLL3_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003652:	e004      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800365a:	e000      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800365c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800366e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	4a22      	ldr	r2, [pc, #136]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003678:	430b      	orrs	r3, r1
 800367a:	6553      	str	r3, [r2, #84]	; 0x54
 800367c:	e003      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003682:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003692:	673b      	str	r3, [r7, #112]	; 0x70
 8003694:	2300      	movs	r3, #0
 8003696:	677b      	str	r3, [r7, #116]	; 0x74
 8003698:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800369c:	460b      	mov	r3, r1
 800369e:	4313      	orrs	r3, r2
 80036a0:	d034      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80036a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b0:	d007      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80036b2:	e011      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	4a11      	ldr	r2, [pc, #68]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036c0:	e00e      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c6:	3308      	adds	r3, #8
 80036c8:	2102      	movs	r1, #2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f9e6 	bl	8003a9c <RCCEx_PLL2_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036d6:	e003      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10d      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f6:	4a02      	ldr	r2, [pc, #8]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036f8:	430b      	orrs	r3, r1
 80036fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036fc:	e006      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80036fe:	bf00      	nop
 8003700:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003708:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800370c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003718:	66bb      	str	r3, [r7, #104]	; 0x68
 800371a:	2300      	movs	r3, #0
 800371c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800371e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003722:	460b      	mov	r3, r1
 8003724:	4313      	orrs	r3, r2
 8003726:	d00c      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800372c:	3328      	adds	r3, #40	; 0x28
 800372e:	2102      	movs	r1, #2
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fa65 	bl	8003c00 <RCCEx_PLL3_Config>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800374e:	663b      	str	r3, [r7, #96]	; 0x60
 8003750:	2300      	movs	r3, #0
 8003752:	667b      	str	r3, [r7, #100]	; 0x64
 8003754:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003758:	460b      	mov	r3, r1
 800375a:	4313      	orrs	r3, r2
 800375c:	d038      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800376a:	d018      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800376c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003770:	d811      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003776:	d014      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800377c:	d80b      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d011      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003786:	d106      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003788:	4bc3      	ldr	r3, [pc, #780]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	4ac2      	ldr	r2, [pc, #776]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800378e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003792:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003794:	e008      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800379c:	e004      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800379e:	bf00      	nop
 80037a0:	e002      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80037a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037b0:	4bb9      	ldr	r3, [pc, #740]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037c0:	4ab5      	ldr	r2, [pc, #724]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037c2:	430b      	orrs	r3, r1
 80037c4:	6553      	str	r3, [r2, #84]	; 0x54
 80037c6:	e003      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80037dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80037de:	2300      	movs	r3, #0
 80037e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80037e6:	460b      	mov	r3, r1
 80037e8:	4313      	orrs	r3, r2
 80037ea:	d009      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037ec:	4baa      	ldr	r3, [pc, #680]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fa:	4aa7      	ldr	r2, [pc, #668]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800380c:	653b      	str	r3, [r7, #80]	; 0x50
 800380e:	2300      	movs	r3, #0
 8003810:	657b      	str	r3, [r7, #84]	; 0x54
 8003812:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003816:	460b      	mov	r3, r1
 8003818:	4313      	orrs	r3, r2
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800381c:	4b9e      	ldr	r3, [pc, #632]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003828:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800382c:	4a9a      	ldr	r2, [pc, #616]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800382e:	430b      	orrs	r3, r1
 8003830:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800383e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003840:	2300      	movs	r3, #0
 8003842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003844:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003848:	460b      	mov	r3, r1
 800384a:	4313      	orrs	r3, r2
 800384c:	d009      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800384e:	4b92      	ldr	r3, [pc, #584]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003852:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800385c:	4a8e      	ldr	r2, [pc, #568]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800385e:	430b      	orrs	r3, r1
 8003860:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800386e:	643b      	str	r3, [r7, #64]	; 0x40
 8003870:	2300      	movs	r3, #0
 8003872:	647b      	str	r3, [r7, #68]	; 0x44
 8003874:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003878:	460b      	mov	r3, r1
 800387a:	4313      	orrs	r3, r2
 800387c:	d00e      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800387e:	4b86      	ldr	r3, [pc, #536]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	4a85      	ldr	r2, [pc, #532]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003884:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003888:	6113      	str	r3, [r2, #16]
 800388a:	4b83      	ldr	r3, [pc, #524]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800388c:	6919      	ldr	r1, [r3, #16]
 800388e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003892:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003896:	4a80      	ldr	r2, [pc, #512]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003898:	430b      	orrs	r3, r1
 800389a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80038a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80038aa:	2300      	movs	r3, #0
 80038ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80038b2:	460b      	mov	r3, r1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038b8:	4b77      	ldr	r3, [pc, #476]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038bc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c6:	4a74      	ldr	r2, [pc, #464]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80038d8:	633b      	str	r3, [r7, #48]	; 0x30
 80038da:	2300      	movs	r3, #0
 80038dc:	637b      	str	r3, [r7, #52]	; 0x34
 80038de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80038e2:	460b      	mov	r3, r1
 80038e4:	4313      	orrs	r3, r2
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038e8:	4b6b      	ldr	r3, [pc, #428]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ec:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f8:	4a67      	ldr	r2, [pc, #412]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038fa:	430b      	orrs	r3, r1
 80038fc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	2100      	movs	r1, #0
 8003908:	62b9      	str	r1, [r7, #40]	; 0x28
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003910:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003914:	460b      	mov	r3, r1
 8003916:	4313      	orrs	r3, r2
 8003918:	d011      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800391a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800391e:	3308      	adds	r3, #8
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f8ba 	bl	8003a9c <RCCEx_PLL2_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800392e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800393a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800393e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	2100      	movs	r1, #0
 8003948:	6239      	str	r1, [r7, #32]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
 8003950:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003954:	460b      	mov	r3, r1
 8003956:	4313      	orrs	r3, r2
 8003958:	d011      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800395e:	3308      	adds	r3, #8
 8003960:	2101      	movs	r1, #1
 8003962:	4618      	mov	r0, r3
 8003964:	f000 f89a 	bl	8003a9c <RCCEx_PLL2_Config>
 8003968:	4603      	mov	r3, r0
 800396a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800396e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800397a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	2100      	movs	r1, #0
 8003988:	61b9      	str	r1, [r7, #24]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003994:	460b      	mov	r3, r1
 8003996:	4313      	orrs	r3, r2
 8003998:	d011      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399e:	3308      	adds	r3, #8
 80039a0:	2102      	movs	r1, #2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f87a 	bl	8003a9c <RCCEx_PLL2_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80039ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	2100      	movs	r1, #0
 80039c8:	6139      	str	r1, [r7, #16]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80039d4:	460b      	mov	r3, r1
 80039d6:	4313      	orrs	r3, r2
 80039d8:	d011      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039de:	3328      	adds	r3, #40	; 0x28
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f90c 	bl	8003c00 <RCCEx_PLL3_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80039ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	2100      	movs	r1, #0
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a14:	460b      	mov	r3, r1
 8003a16:	4313      	orrs	r3, r2
 8003a18:	d011      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1e:	3328      	adds	r3, #40	; 0x28
 8003a20:	2101      	movs	r1, #1
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f8ec 	bl	8003c00 <RCCEx_PLL3_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	2100      	movs	r1, #0
 8003a48:	6039      	str	r1, [r7, #0]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a54:	460b      	mov	r3, r1
 8003a56:	4313      	orrs	r3, r2
 8003a58:	d011      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a5e:	3328      	adds	r3, #40	; 0x28
 8003a60:	2102      	movs	r1, #2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f8cc 	bl	8003c00 <RCCEx_PLL3_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003a7e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e000      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003a92:	46bd      	mov	sp, r7
 8003a94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a98:	58024400 	.word	0x58024400

08003a9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003aaa:	4b53      	ldr	r3, [pc, #332]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d101      	bne.n	8003aba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e099      	b.n	8003bee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003aba:	4b4f      	ldr	r3, [pc, #316]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a4e      	ldr	r2, [pc, #312]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003ac0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac6:	f7fd fad3 	bl	8001070 <HAL_GetTick>
 8003aca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003acc:	e008      	b.n	8003ae0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ace:	f7fd facf 	bl	8001070 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e086      	b.n	8003bee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ae0:	4b45      	ldr	r3, [pc, #276]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f0      	bne.n	8003ace <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003aec:	4b42      	ldr	r3, [pc, #264]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	031b      	lsls	r3, r3, #12
 8003afa:	493f      	ldr	r1, [pc, #252]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	628b      	str	r3, [r1, #40]	; 0x28
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	025b      	lsls	r3, r3, #9
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	041b      	lsls	r3, r3, #16
 8003b1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	061b      	lsls	r3, r3, #24
 8003b2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b30:	4931      	ldr	r1, [pc, #196]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003b36:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	492d      	ldr	r1, [pc, #180]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003b48:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	f023 0220 	bic.w	r2, r3, #32
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	4928      	ldr	r1, [pc, #160]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003b5a:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	4a26      	ldr	r2, [pc, #152]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003b60:	f023 0310 	bic.w	r3, r3, #16
 8003b64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003b66:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b6a:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <RCCEx_PLL2_Config+0x160>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	69d2      	ldr	r2, [r2, #28]
 8003b72:	00d2      	lsls	r2, r2, #3
 8003b74:	4920      	ldr	r1, [pc, #128]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003b7a:	4b1f      	ldr	r3, [pc, #124]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003b80:	f043 0310 	orr.w	r3, r3, #16
 8003b84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003b8c:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	4a19      	ldr	r2, [pc, #100]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003b92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b98:	e00f      	b.n	8003bba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d106      	bne.n	8003bae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ba0:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003baa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003bac:	e005      	b.n	8003bba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a0e      	ldr	r2, [pc, #56]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003bc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc6:	f7fd fa53 	bl	8001070 <HAL_GetTick>
 8003bca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003bcc:	e008      	b.n	8003be0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003bce:	f7fd fa4f 	bl	8001070 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e006      	b.n	8003bee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <RCCEx_PLL2_Config+0x15c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	58024400 	.word	0x58024400
 8003bfc:	ffff0007 	.word	0xffff0007

08003c00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c0e:	4b53      	ldr	r3, [pc, #332]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d101      	bne.n	8003c1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e099      	b.n	8003d52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003c1e:	4b4f      	ldr	r3, [pc, #316]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a4e      	ldr	r2, [pc, #312]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c2a:	f7fd fa21 	bl	8001070 <HAL_GetTick>
 8003c2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c30:	e008      	b.n	8003c44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003c32:	f7fd fa1d 	bl	8001070 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e086      	b.n	8003d52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c44:	4b45      	ldr	r3, [pc, #276]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f0      	bne.n	8003c32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003c50:	4b42      	ldr	r3, [pc, #264]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	051b      	lsls	r3, r3, #20
 8003c5e:	493f      	ldr	r1, [pc, #252]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	628b      	str	r3, [r1, #40]	; 0x28
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	025b      	lsls	r3, r3, #9
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	061b      	lsls	r3, r3, #24
 8003c90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c94:	4931      	ldr	r1, [pc, #196]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003c9a:	4b30      	ldr	r3, [pc, #192]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	492d      	ldr	r1, [pc, #180]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003cac:	4b2b      	ldr	r3, [pc, #172]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	4928      	ldr	r1, [pc, #160]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003cbe:	4b27      	ldr	r3, [pc, #156]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003cca:	4b24      	ldr	r3, [pc, #144]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cce:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <RCCEx_PLL3_Config+0x160>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	69d2      	ldr	r2, [r2, #28]
 8003cd6:	00d2      	lsls	r2, r2, #3
 8003cd8:	4920      	ldr	r1, [pc, #128]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003cde:	4b1f      	ldr	r3, [pc, #124]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003cf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cfc:	e00f      	b.n	8003d1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d106      	bne.n	8003d12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003d04:	4b15      	ldr	r3, [pc, #84]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003d0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d10:	e005      	b.n	8003d1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003d12:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	4a11      	ldr	r2, [pc, #68]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003d1e:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a0e      	ldr	r2, [pc, #56]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2a:	f7fd f9a1 	bl	8001070 <HAL_GetTick>
 8003d2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d30:	e008      	b.n	8003d44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003d32:	f7fd f99d 	bl	8001070 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e006      	b.n	8003d52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <RCCEx_PLL3_Config+0x15c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	58024400 	.word	0x58024400
 8003d60:	ffff0007 	.word	0xffff0007

08003d64 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e10f      	b.n	8003f96 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a87      	ldr	r2, [pc, #540]	; (8003fa0 <HAL_SPI_Init+0x23c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00f      	beq.n	8003da6 <HAL_SPI_Init+0x42>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a86      	ldr	r2, [pc, #536]	; (8003fa4 <HAL_SPI_Init+0x240>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00a      	beq.n	8003da6 <HAL_SPI_Init+0x42>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a84      	ldr	r2, [pc, #528]	; (8003fa8 <HAL_SPI_Init+0x244>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d005      	beq.n	8003da6 <HAL_SPI_Init+0x42>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b0f      	cmp	r3, #15
 8003da0:	d901      	bls.n	8003da6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e0f7      	b.n	8003f96 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fbca 	bl	8004540 <SPI_GetPacketSize>
 8003dac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7b      	ldr	r2, [pc, #492]	; (8003fa0 <HAL_SPI_Init+0x23c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00c      	beq.n	8003dd2 <HAL_SPI_Init+0x6e>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a79      	ldr	r2, [pc, #484]	; (8003fa4 <HAL_SPI_Init+0x240>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d007      	beq.n	8003dd2 <HAL_SPI_Init+0x6e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a78      	ldr	r2, [pc, #480]	; (8003fa8 <HAL_SPI_Init+0x244>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d002      	beq.n	8003dd2 <HAL_SPI_Init+0x6e>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d811      	bhi.n	8003df6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003dd6:	4a72      	ldr	r2, [pc, #456]	; (8003fa0 <HAL_SPI_Init+0x23c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d009      	beq.n	8003df0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a70      	ldr	r2, [pc, #448]	; (8003fa4 <HAL_SPI_Init+0x240>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_SPI_Init+0x8c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a6f      	ldr	r2, [pc, #444]	; (8003fa8 <HAL_SPI_Init+0x244>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d104      	bne.n	8003dfa <HAL_SPI_Init+0x96>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b10      	cmp	r3, #16
 8003df4:	d901      	bls.n	8003dfa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e0cd      	b.n	8003f96 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fc fe8a 	bl	8000b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0201 	bic.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003e36:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e40:	d119      	bne.n	8003e76 <HAL_SPI_Init+0x112>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e4a:	d103      	bne.n	8003e54 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10c      	bne.n	8003e76 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e64:	d107      	bne.n	8003e76 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00f      	beq.n	8003ea2 <HAL_SPI_Init+0x13e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d90b      	bls.n	8003ea2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e007      	b.n	8003eb2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	ea42 0103 	orr.w	r1, r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f12:	ea42 0103 	orr.w	r1, r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d113      	bne.n	8003f52 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0201 	bic.w	r2, r2, #1
 8003f60:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40013000 	.word	0x40013000
 8003fa4:	40003800 	.word	0x40003800
 8003fa8:	40003c00 	.word	0x40003c00

08003fac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3320      	adds	r3, #32
 8003fc2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_SPI_Transmit+0x2a>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e1e1      	b.n	800439a <HAL_SPI_Transmit+0x3ee>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fde:	f7fd f847 	bl	8001070 <HAL_GetTick>
 8003fe2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d007      	beq.n	8004000 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003ffc:	7efb      	ldrb	r3, [r7, #27]
 8003ffe:	e1cc      	b.n	800439a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_SPI_Transmit+0x60>
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d107      	bne.n	800401c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004018:	7efb      	ldrb	r3, [r7, #27]
 800401a:	e1be      	b.n	800439a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2203      	movs	r2, #3
 8004020:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	88fa      	ldrh	r2, [r7, #6]
 8004036:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	88fa      	ldrh	r2, [r7, #6]
 800403e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800406c:	d108      	bne.n	8004080 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e009      	b.n	8004094 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004092:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	4b96      	ldr	r3, [pc, #600]	; (80042f4 <HAL_SPI_Transmit+0x348>)
 800409c:	4013      	ands	r3, r2
 800409e:	88f9      	ldrh	r1, [r7, #6]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c0:	d107      	bne.n	80040d2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b0f      	cmp	r3, #15
 80040d8:	d947      	bls.n	800416a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80040da:	e03f      	b.n	800415c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d114      	bne.n	8004114 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fa:	1d1a      	adds	r2, r3, #4
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004112:	e023      	b.n	800415c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004114:	f7fc ffac 	bl	8001070 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d803      	bhi.n	800412c <HAL_SPI_Transmit+0x180>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412a:	d102      	bne.n	8004132 <HAL_SPI_Transmit+0x186>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d114      	bne.n	800415c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f936 	bl	80043a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004146:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e11e      	b.n	800439a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1b9      	bne.n	80040dc <HAL_SPI_Transmit+0x130>
 8004168:	e0f1      	b.n	800434e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b07      	cmp	r3, #7
 8004170:	f240 80e6 	bls.w	8004340 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004174:	e05d      	b.n	8004232 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b02      	cmp	r3, #2
 8004182:	d132      	bne.n	80041ea <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	d918      	bls.n	80041c2 <HAL_SPI_Transmit+0x216>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d014      	beq.n	80041c2 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a8:	1d1a      	adds	r2, r3, #4
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b02      	subs	r3, #2
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80041c0:	e037      	b.n	8004232 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c6:	881a      	ldrh	r2, [r3, #0]
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d0:	1c9a      	adds	r2, r3, #2
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80041e8:	e023      	b.n	8004232 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ea:	f7fc ff41 	bl	8001070 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d803      	bhi.n	8004202 <HAL_SPI_Transmit+0x256>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d102      	bne.n	8004208 <HAL_SPI_Transmit+0x25c>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d114      	bne.n	8004232 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f8cb 	bl	80043a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800421c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e0b3      	b.n	800439a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d19b      	bne.n	8004176 <HAL_SPI_Transmit+0x1ca>
 800423e:	e086      	b.n	800434e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b02      	cmp	r3, #2
 800424c:	d154      	bne.n	80042f8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b03      	cmp	r3, #3
 8004258:	d918      	bls.n	800428c <HAL_SPI_Transmit+0x2e0>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d914      	bls.n	800428c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004272:	1d1a      	adds	r2, r3, #4
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b04      	subs	r3, #4
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800428a:	e059      	b.n	8004340 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	d917      	bls.n	80042c8 <HAL_SPI_Transmit+0x31c>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d013      	beq.n	80042c8 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a4:	881a      	ldrh	r2, [r3, #0]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ae:	1c9a      	adds	r2, r3, #2
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b02      	subs	r3, #2
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80042c6:	e03b      	b.n	8004340 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3320      	adds	r3, #32
 80042d2:	7812      	ldrb	r2, [r2, #0]
 80042d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80042f2:	e025      	b.n	8004340 <HAL_SPI_Transmit+0x394>
 80042f4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042f8:	f7fc feba 	bl	8001070 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d803      	bhi.n	8004310 <HAL_SPI_Transmit+0x364>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	d102      	bne.n	8004316 <HAL_SPI_Transmit+0x36a>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d114      	bne.n	8004340 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f844 	bl	80043a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e02c      	b.n	800439a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	f47f af79 	bne.w	8004240 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2200      	movs	r2, #0
 8004356:	2108      	movs	r1, #8
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f8c3 	bl	80044e4 <SPI_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d007      	beq.n	8004374 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436a:	f043 0220 	orr.w	r2, r3, #32
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f815 	bl	80043a4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8004398:	7efb      	ldrb	r3, [r7, #27]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop

080043a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0208 	orr.w	r2, r2, #8
 80043c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0210 	orr.w	r2, r2, #16
 80043d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0201 	bic.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6919      	ldr	r1, [r3, #16]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4b3c      	ldr	r3, [pc, #240]	; (80044e0 <SPI_CloseTransfer+0x13c>)
 80043f0:	400b      	ands	r3, r1
 80043f2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004402:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b04      	cmp	r3, #4
 800440e:	d014      	beq.n	800443a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00f      	beq.n	800443a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004420:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699a      	ldr	r2, [r3, #24]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0220 	orr.w	r2, r2, #32
 8004438:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b03      	cmp	r3, #3
 8004444:	d014      	beq.n	8004470 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00f      	beq.n	8004470 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004456:	f043 0204 	orr.w	r2, r3, #4
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800446e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00f      	beq.n	800449a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004480:	f043 0201 	orr.w	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699a      	ldr	r2, [r3, #24]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004498:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00f      	beq.n	80044c4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044aa:	f043 0208 	orr.w	r2, r3, #8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	fffffc90 	.word	0xfffffc90

080044e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80044f4:	e010      	b.n	8004518 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044f6:	f7fc fdbb 	bl	8001070 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d803      	bhi.n	800450e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450c:	d102      	bne.n	8004514 <SPI_WaitOnFlagUntilTimeout+0x30>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e00f      	b.n	8004538 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4013      	ands	r3, r2
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	429a      	cmp	r2, r3
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	461a      	mov	r2, r3
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	429a      	cmp	r2, r3
 8004534:	d0df      	beq.n	80044f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	3301      	adds	r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	3301      	adds	r3, #1
 8004558:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	3307      	adds	r3, #7
 800455e:	08db      	lsrs	r3, r3, #3
 8004560:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	fb02 f303 	mul.w	r3, r2, r3
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <__errno>:
 8004578:	4b01      	ldr	r3, [pc, #4]	; (8004580 <__errno+0x8>)
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	24000010 	.word	0x24000010

08004584 <__libc_init_array>:
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	4d0d      	ldr	r5, [pc, #52]	; (80045bc <__libc_init_array+0x38>)
 8004588:	4c0d      	ldr	r4, [pc, #52]	; (80045c0 <__libc_init_array+0x3c>)
 800458a:	1b64      	subs	r4, r4, r5
 800458c:	10a4      	asrs	r4, r4, #2
 800458e:	2600      	movs	r6, #0
 8004590:	42a6      	cmp	r6, r4
 8004592:	d109      	bne.n	80045a8 <__libc_init_array+0x24>
 8004594:	4d0b      	ldr	r5, [pc, #44]	; (80045c4 <__libc_init_array+0x40>)
 8004596:	4c0c      	ldr	r4, [pc, #48]	; (80045c8 <__libc_init_array+0x44>)
 8004598:	f001 f824 	bl	80055e4 <_init>
 800459c:	1b64      	subs	r4, r4, r5
 800459e:	10a4      	asrs	r4, r4, #2
 80045a0:	2600      	movs	r6, #0
 80045a2:	42a6      	cmp	r6, r4
 80045a4:	d105      	bne.n	80045b2 <__libc_init_array+0x2e>
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
 80045a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ac:	4798      	blx	r3
 80045ae:	3601      	adds	r6, #1
 80045b0:	e7ee      	b.n	8004590 <__libc_init_array+0xc>
 80045b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b6:	4798      	blx	r3
 80045b8:	3601      	adds	r6, #1
 80045ba:	e7f2      	b.n	80045a2 <__libc_init_array+0x1e>
 80045bc:	0800eb78 	.word	0x0800eb78
 80045c0:	0800eb78 	.word	0x0800eb78
 80045c4:	0800eb78 	.word	0x0800eb78
 80045c8:	0800eb7c 	.word	0x0800eb7c

080045cc <memset>:
 80045cc:	4402      	add	r2, r0
 80045ce:	4603      	mov	r3, r0
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d100      	bne.n	80045d6 <memset+0xa>
 80045d4:	4770      	bx	lr
 80045d6:	f803 1b01 	strb.w	r1, [r3], #1
 80045da:	e7f9      	b.n	80045d0 <memset+0x4>

080045dc <iprintf>:
 80045dc:	b40f      	push	{r0, r1, r2, r3}
 80045de:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <iprintf+0x2c>)
 80045e0:	b513      	push	{r0, r1, r4, lr}
 80045e2:	681c      	ldr	r4, [r3, #0]
 80045e4:	b124      	cbz	r4, 80045f0 <iprintf+0x14>
 80045e6:	69a3      	ldr	r3, [r4, #24]
 80045e8:	b913      	cbnz	r3, 80045f0 <iprintf+0x14>
 80045ea:	4620      	mov	r0, r4
 80045ec:	f000 fa5e 	bl	8004aac <__sinit>
 80045f0:	ab05      	add	r3, sp, #20
 80045f2:	9a04      	ldr	r2, [sp, #16]
 80045f4:	68a1      	ldr	r1, [r4, #8]
 80045f6:	9301      	str	r3, [sp, #4]
 80045f8:	4620      	mov	r0, r4
 80045fa:	f000 fc67 	bl	8004ecc <_vfiprintf_r>
 80045fe:	b002      	add	sp, #8
 8004600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004604:	b004      	add	sp, #16
 8004606:	4770      	bx	lr
 8004608:	24000010 	.word	0x24000010

0800460c <_puts_r>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	460e      	mov	r6, r1
 8004610:	4605      	mov	r5, r0
 8004612:	b118      	cbz	r0, 800461c <_puts_r+0x10>
 8004614:	6983      	ldr	r3, [r0, #24]
 8004616:	b90b      	cbnz	r3, 800461c <_puts_r+0x10>
 8004618:	f000 fa48 	bl	8004aac <__sinit>
 800461c:	69ab      	ldr	r3, [r5, #24]
 800461e:	68ac      	ldr	r4, [r5, #8]
 8004620:	b913      	cbnz	r3, 8004628 <_puts_r+0x1c>
 8004622:	4628      	mov	r0, r5
 8004624:	f000 fa42 	bl	8004aac <__sinit>
 8004628:	4b2c      	ldr	r3, [pc, #176]	; (80046dc <_puts_r+0xd0>)
 800462a:	429c      	cmp	r4, r3
 800462c:	d120      	bne.n	8004670 <_puts_r+0x64>
 800462e:	686c      	ldr	r4, [r5, #4]
 8004630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004632:	07db      	lsls	r3, r3, #31
 8004634:	d405      	bmi.n	8004642 <_puts_r+0x36>
 8004636:	89a3      	ldrh	r3, [r4, #12]
 8004638:	0598      	lsls	r0, r3, #22
 800463a:	d402      	bmi.n	8004642 <_puts_r+0x36>
 800463c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800463e:	f000 fad3 	bl	8004be8 <__retarget_lock_acquire_recursive>
 8004642:	89a3      	ldrh	r3, [r4, #12]
 8004644:	0719      	lsls	r1, r3, #28
 8004646:	d51d      	bpl.n	8004684 <_puts_r+0x78>
 8004648:	6923      	ldr	r3, [r4, #16]
 800464a:	b1db      	cbz	r3, 8004684 <_puts_r+0x78>
 800464c:	3e01      	subs	r6, #1
 800464e:	68a3      	ldr	r3, [r4, #8]
 8004650:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004654:	3b01      	subs	r3, #1
 8004656:	60a3      	str	r3, [r4, #8]
 8004658:	bb39      	cbnz	r1, 80046aa <_puts_r+0x9e>
 800465a:	2b00      	cmp	r3, #0
 800465c:	da38      	bge.n	80046d0 <_puts_r+0xc4>
 800465e:	4622      	mov	r2, r4
 8004660:	210a      	movs	r1, #10
 8004662:	4628      	mov	r0, r5
 8004664:	f000 f848 	bl	80046f8 <__swbuf_r>
 8004668:	3001      	adds	r0, #1
 800466a:	d011      	beq.n	8004690 <_puts_r+0x84>
 800466c:	250a      	movs	r5, #10
 800466e:	e011      	b.n	8004694 <_puts_r+0x88>
 8004670:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <_puts_r+0xd4>)
 8004672:	429c      	cmp	r4, r3
 8004674:	d101      	bne.n	800467a <_puts_r+0x6e>
 8004676:	68ac      	ldr	r4, [r5, #8]
 8004678:	e7da      	b.n	8004630 <_puts_r+0x24>
 800467a:	4b1a      	ldr	r3, [pc, #104]	; (80046e4 <_puts_r+0xd8>)
 800467c:	429c      	cmp	r4, r3
 800467e:	bf08      	it	eq
 8004680:	68ec      	ldreq	r4, [r5, #12]
 8004682:	e7d5      	b.n	8004630 <_puts_r+0x24>
 8004684:	4621      	mov	r1, r4
 8004686:	4628      	mov	r0, r5
 8004688:	f000 f888 	bl	800479c <__swsetup_r>
 800468c:	2800      	cmp	r0, #0
 800468e:	d0dd      	beq.n	800464c <_puts_r+0x40>
 8004690:	f04f 35ff 	mov.w	r5, #4294967295
 8004694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004696:	07da      	lsls	r2, r3, #31
 8004698:	d405      	bmi.n	80046a6 <_puts_r+0x9a>
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	059b      	lsls	r3, r3, #22
 800469e:	d402      	bmi.n	80046a6 <_puts_r+0x9a>
 80046a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046a2:	f000 faa2 	bl	8004bea <__retarget_lock_release_recursive>
 80046a6:	4628      	mov	r0, r5
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	da04      	bge.n	80046b8 <_puts_r+0xac>
 80046ae:	69a2      	ldr	r2, [r4, #24]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	dc06      	bgt.n	80046c2 <_puts_r+0xb6>
 80046b4:	290a      	cmp	r1, #10
 80046b6:	d004      	beq.n	80046c2 <_puts_r+0xb6>
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	6022      	str	r2, [r4, #0]
 80046be:	7019      	strb	r1, [r3, #0]
 80046c0:	e7c5      	b.n	800464e <_puts_r+0x42>
 80046c2:	4622      	mov	r2, r4
 80046c4:	4628      	mov	r0, r5
 80046c6:	f000 f817 	bl	80046f8 <__swbuf_r>
 80046ca:	3001      	adds	r0, #1
 80046cc:	d1bf      	bne.n	800464e <_puts_r+0x42>
 80046ce:	e7df      	b.n	8004690 <_puts_r+0x84>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	250a      	movs	r5, #10
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	6022      	str	r2, [r4, #0]
 80046d8:	701d      	strb	r5, [r3, #0]
 80046da:	e7db      	b.n	8004694 <_puts_r+0x88>
 80046dc:	0800eb04 	.word	0x0800eb04
 80046e0:	0800eb24 	.word	0x0800eb24
 80046e4:	0800eae4 	.word	0x0800eae4

080046e8 <puts>:
 80046e8:	4b02      	ldr	r3, [pc, #8]	; (80046f4 <puts+0xc>)
 80046ea:	4601      	mov	r1, r0
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	f7ff bf8d 	b.w	800460c <_puts_r>
 80046f2:	bf00      	nop
 80046f4:	24000010 	.word	0x24000010

080046f8 <__swbuf_r>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	460e      	mov	r6, r1
 80046fc:	4614      	mov	r4, r2
 80046fe:	4605      	mov	r5, r0
 8004700:	b118      	cbz	r0, 800470a <__swbuf_r+0x12>
 8004702:	6983      	ldr	r3, [r0, #24]
 8004704:	b90b      	cbnz	r3, 800470a <__swbuf_r+0x12>
 8004706:	f000 f9d1 	bl	8004aac <__sinit>
 800470a:	4b21      	ldr	r3, [pc, #132]	; (8004790 <__swbuf_r+0x98>)
 800470c:	429c      	cmp	r4, r3
 800470e:	d12b      	bne.n	8004768 <__swbuf_r+0x70>
 8004710:	686c      	ldr	r4, [r5, #4]
 8004712:	69a3      	ldr	r3, [r4, #24]
 8004714:	60a3      	str	r3, [r4, #8]
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	071a      	lsls	r2, r3, #28
 800471a:	d52f      	bpl.n	800477c <__swbuf_r+0x84>
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	b36b      	cbz	r3, 800477c <__swbuf_r+0x84>
 8004720:	6923      	ldr	r3, [r4, #16]
 8004722:	6820      	ldr	r0, [r4, #0]
 8004724:	1ac0      	subs	r0, r0, r3
 8004726:	6963      	ldr	r3, [r4, #20]
 8004728:	b2f6      	uxtb	r6, r6
 800472a:	4283      	cmp	r3, r0
 800472c:	4637      	mov	r7, r6
 800472e:	dc04      	bgt.n	800473a <__swbuf_r+0x42>
 8004730:	4621      	mov	r1, r4
 8004732:	4628      	mov	r0, r5
 8004734:	f000 f926 	bl	8004984 <_fflush_r>
 8004738:	bb30      	cbnz	r0, 8004788 <__swbuf_r+0x90>
 800473a:	68a3      	ldr	r3, [r4, #8]
 800473c:	3b01      	subs	r3, #1
 800473e:	60a3      	str	r3, [r4, #8]
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	6022      	str	r2, [r4, #0]
 8004746:	701e      	strb	r6, [r3, #0]
 8004748:	6963      	ldr	r3, [r4, #20]
 800474a:	3001      	adds	r0, #1
 800474c:	4283      	cmp	r3, r0
 800474e:	d004      	beq.n	800475a <__swbuf_r+0x62>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	07db      	lsls	r3, r3, #31
 8004754:	d506      	bpl.n	8004764 <__swbuf_r+0x6c>
 8004756:	2e0a      	cmp	r6, #10
 8004758:	d104      	bne.n	8004764 <__swbuf_r+0x6c>
 800475a:	4621      	mov	r1, r4
 800475c:	4628      	mov	r0, r5
 800475e:	f000 f911 	bl	8004984 <_fflush_r>
 8004762:	b988      	cbnz	r0, 8004788 <__swbuf_r+0x90>
 8004764:	4638      	mov	r0, r7
 8004766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <__swbuf_r+0x9c>)
 800476a:	429c      	cmp	r4, r3
 800476c:	d101      	bne.n	8004772 <__swbuf_r+0x7a>
 800476e:	68ac      	ldr	r4, [r5, #8]
 8004770:	e7cf      	b.n	8004712 <__swbuf_r+0x1a>
 8004772:	4b09      	ldr	r3, [pc, #36]	; (8004798 <__swbuf_r+0xa0>)
 8004774:	429c      	cmp	r4, r3
 8004776:	bf08      	it	eq
 8004778:	68ec      	ldreq	r4, [r5, #12]
 800477a:	e7ca      	b.n	8004712 <__swbuf_r+0x1a>
 800477c:	4621      	mov	r1, r4
 800477e:	4628      	mov	r0, r5
 8004780:	f000 f80c 	bl	800479c <__swsetup_r>
 8004784:	2800      	cmp	r0, #0
 8004786:	d0cb      	beq.n	8004720 <__swbuf_r+0x28>
 8004788:	f04f 37ff 	mov.w	r7, #4294967295
 800478c:	e7ea      	b.n	8004764 <__swbuf_r+0x6c>
 800478e:	bf00      	nop
 8004790:	0800eb04 	.word	0x0800eb04
 8004794:	0800eb24 	.word	0x0800eb24
 8004798:	0800eae4 	.word	0x0800eae4

0800479c <__swsetup_r>:
 800479c:	4b32      	ldr	r3, [pc, #200]	; (8004868 <__swsetup_r+0xcc>)
 800479e:	b570      	push	{r4, r5, r6, lr}
 80047a0:	681d      	ldr	r5, [r3, #0]
 80047a2:	4606      	mov	r6, r0
 80047a4:	460c      	mov	r4, r1
 80047a6:	b125      	cbz	r5, 80047b2 <__swsetup_r+0x16>
 80047a8:	69ab      	ldr	r3, [r5, #24]
 80047aa:	b913      	cbnz	r3, 80047b2 <__swsetup_r+0x16>
 80047ac:	4628      	mov	r0, r5
 80047ae:	f000 f97d 	bl	8004aac <__sinit>
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <__swsetup_r+0xd0>)
 80047b4:	429c      	cmp	r4, r3
 80047b6:	d10f      	bne.n	80047d8 <__swsetup_r+0x3c>
 80047b8:	686c      	ldr	r4, [r5, #4]
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047c0:	0719      	lsls	r1, r3, #28
 80047c2:	d42c      	bmi.n	800481e <__swsetup_r+0x82>
 80047c4:	06dd      	lsls	r5, r3, #27
 80047c6:	d411      	bmi.n	80047ec <__swsetup_r+0x50>
 80047c8:	2309      	movs	r3, #9
 80047ca:	6033      	str	r3, [r6, #0]
 80047cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295
 80047d6:	e03e      	b.n	8004856 <__swsetup_r+0xba>
 80047d8:	4b25      	ldr	r3, [pc, #148]	; (8004870 <__swsetup_r+0xd4>)
 80047da:	429c      	cmp	r4, r3
 80047dc:	d101      	bne.n	80047e2 <__swsetup_r+0x46>
 80047de:	68ac      	ldr	r4, [r5, #8]
 80047e0:	e7eb      	b.n	80047ba <__swsetup_r+0x1e>
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <__swsetup_r+0xd8>)
 80047e4:	429c      	cmp	r4, r3
 80047e6:	bf08      	it	eq
 80047e8:	68ec      	ldreq	r4, [r5, #12]
 80047ea:	e7e6      	b.n	80047ba <__swsetup_r+0x1e>
 80047ec:	0758      	lsls	r0, r3, #29
 80047ee:	d512      	bpl.n	8004816 <__swsetup_r+0x7a>
 80047f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047f2:	b141      	cbz	r1, 8004806 <__swsetup_r+0x6a>
 80047f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047f8:	4299      	cmp	r1, r3
 80047fa:	d002      	beq.n	8004802 <__swsetup_r+0x66>
 80047fc:	4630      	mov	r0, r6
 80047fe:	f000 fa5b 	bl	8004cb8 <_free_r>
 8004802:	2300      	movs	r3, #0
 8004804:	6363      	str	r3, [r4, #52]	; 0x34
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800480c:	81a3      	strh	r3, [r4, #12]
 800480e:	2300      	movs	r3, #0
 8004810:	6063      	str	r3, [r4, #4]
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	f043 0308 	orr.w	r3, r3, #8
 800481c:	81a3      	strh	r3, [r4, #12]
 800481e:	6923      	ldr	r3, [r4, #16]
 8004820:	b94b      	cbnz	r3, 8004836 <__swsetup_r+0x9a>
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800482c:	d003      	beq.n	8004836 <__swsetup_r+0x9a>
 800482e:	4621      	mov	r1, r4
 8004830:	4630      	mov	r0, r6
 8004832:	f000 fa01 	bl	8004c38 <__smakebuf_r>
 8004836:	89a0      	ldrh	r0, [r4, #12]
 8004838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800483c:	f010 0301 	ands.w	r3, r0, #1
 8004840:	d00a      	beq.n	8004858 <__swsetup_r+0xbc>
 8004842:	2300      	movs	r3, #0
 8004844:	60a3      	str	r3, [r4, #8]
 8004846:	6963      	ldr	r3, [r4, #20]
 8004848:	425b      	negs	r3, r3
 800484a:	61a3      	str	r3, [r4, #24]
 800484c:	6923      	ldr	r3, [r4, #16]
 800484e:	b943      	cbnz	r3, 8004862 <__swsetup_r+0xc6>
 8004850:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004854:	d1ba      	bne.n	80047cc <__swsetup_r+0x30>
 8004856:	bd70      	pop	{r4, r5, r6, pc}
 8004858:	0781      	lsls	r1, r0, #30
 800485a:	bf58      	it	pl
 800485c:	6963      	ldrpl	r3, [r4, #20]
 800485e:	60a3      	str	r3, [r4, #8]
 8004860:	e7f4      	b.n	800484c <__swsetup_r+0xb0>
 8004862:	2000      	movs	r0, #0
 8004864:	e7f7      	b.n	8004856 <__swsetup_r+0xba>
 8004866:	bf00      	nop
 8004868:	24000010 	.word	0x24000010
 800486c:	0800eb04 	.word	0x0800eb04
 8004870:	0800eb24 	.word	0x0800eb24
 8004874:	0800eae4 	.word	0x0800eae4

08004878 <__sflush_r>:
 8004878:	898a      	ldrh	r2, [r1, #12]
 800487a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800487e:	4605      	mov	r5, r0
 8004880:	0710      	lsls	r0, r2, #28
 8004882:	460c      	mov	r4, r1
 8004884:	d458      	bmi.n	8004938 <__sflush_r+0xc0>
 8004886:	684b      	ldr	r3, [r1, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	dc05      	bgt.n	8004898 <__sflush_r+0x20>
 800488c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	dc02      	bgt.n	8004898 <__sflush_r+0x20>
 8004892:	2000      	movs	r0, #0
 8004894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800489a:	2e00      	cmp	r6, #0
 800489c:	d0f9      	beq.n	8004892 <__sflush_r+0x1a>
 800489e:	2300      	movs	r3, #0
 80048a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048a4:	682f      	ldr	r7, [r5, #0]
 80048a6:	602b      	str	r3, [r5, #0]
 80048a8:	d032      	beq.n	8004910 <__sflush_r+0x98>
 80048aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	075a      	lsls	r2, r3, #29
 80048b0:	d505      	bpl.n	80048be <__sflush_r+0x46>
 80048b2:	6863      	ldr	r3, [r4, #4]
 80048b4:	1ac0      	subs	r0, r0, r3
 80048b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048b8:	b10b      	cbz	r3, 80048be <__sflush_r+0x46>
 80048ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048bc:	1ac0      	subs	r0, r0, r3
 80048be:	2300      	movs	r3, #0
 80048c0:	4602      	mov	r2, r0
 80048c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048c4:	6a21      	ldr	r1, [r4, #32]
 80048c6:	4628      	mov	r0, r5
 80048c8:	47b0      	blx	r6
 80048ca:	1c43      	adds	r3, r0, #1
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	d106      	bne.n	80048de <__sflush_r+0x66>
 80048d0:	6829      	ldr	r1, [r5, #0]
 80048d2:	291d      	cmp	r1, #29
 80048d4:	d82c      	bhi.n	8004930 <__sflush_r+0xb8>
 80048d6:	4a2a      	ldr	r2, [pc, #168]	; (8004980 <__sflush_r+0x108>)
 80048d8:	40ca      	lsrs	r2, r1
 80048da:	07d6      	lsls	r6, r2, #31
 80048dc:	d528      	bpl.n	8004930 <__sflush_r+0xb8>
 80048de:	2200      	movs	r2, #0
 80048e0:	6062      	str	r2, [r4, #4]
 80048e2:	04d9      	lsls	r1, r3, #19
 80048e4:	6922      	ldr	r2, [r4, #16]
 80048e6:	6022      	str	r2, [r4, #0]
 80048e8:	d504      	bpl.n	80048f4 <__sflush_r+0x7c>
 80048ea:	1c42      	adds	r2, r0, #1
 80048ec:	d101      	bne.n	80048f2 <__sflush_r+0x7a>
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	b903      	cbnz	r3, 80048f4 <__sflush_r+0x7c>
 80048f2:	6560      	str	r0, [r4, #84]	; 0x54
 80048f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048f6:	602f      	str	r7, [r5, #0]
 80048f8:	2900      	cmp	r1, #0
 80048fa:	d0ca      	beq.n	8004892 <__sflush_r+0x1a>
 80048fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004900:	4299      	cmp	r1, r3
 8004902:	d002      	beq.n	800490a <__sflush_r+0x92>
 8004904:	4628      	mov	r0, r5
 8004906:	f000 f9d7 	bl	8004cb8 <_free_r>
 800490a:	2000      	movs	r0, #0
 800490c:	6360      	str	r0, [r4, #52]	; 0x34
 800490e:	e7c1      	b.n	8004894 <__sflush_r+0x1c>
 8004910:	6a21      	ldr	r1, [r4, #32]
 8004912:	2301      	movs	r3, #1
 8004914:	4628      	mov	r0, r5
 8004916:	47b0      	blx	r6
 8004918:	1c41      	adds	r1, r0, #1
 800491a:	d1c7      	bne.n	80048ac <__sflush_r+0x34>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0c4      	beq.n	80048ac <__sflush_r+0x34>
 8004922:	2b1d      	cmp	r3, #29
 8004924:	d001      	beq.n	800492a <__sflush_r+0xb2>
 8004926:	2b16      	cmp	r3, #22
 8004928:	d101      	bne.n	800492e <__sflush_r+0xb6>
 800492a:	602f      	str	r7, [r5, #0]
 800492c:	e7b1      	b.n	8004892 <__sflush_r+0x1a>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004934:	81a3      	strh	r3, [r4, #12]
 8004936:	e7ad      	b.n	8004894 <__sflush_r+0x1c>
 8004938:	690f      	ldr	r7, [r1, #16]
 800493a:	2f00      	cmp	r7, #0
 800493c:	d0a9      	beq.n	8004892 <__sflush_r+0x1a>
 800493e:	0793      	lsls	r3, r2, #30
 8004940:	680e      	ldr	r6, [r1, #0]
 8004942:	bf08      	it	eq
 8004944:	694b      	ldreq	r3, [r1, #20]
 8004946:	600f      	str	r7, [r1, #0]
 8004948:	bf18      	it	ne
 800494a:	2300      	movne	r3, #0
 800494c:	eba6 0807 	sub.w	r8, r6, r7
 8004950:	608b      	str	r3, [r1, #8]
 8004952:	f1b8 0f00 	cmp.w	r8, #0
 8004956:	dd9c      	ble.n	8004892 <__sflush_r+0x1a>
 8004958:	6a21      	ldr	r1, [r4, #32]
 800495a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800495c:	4643      	mov	r3, r8
 800495e:	463a      	mov	r2, r7
 8004960:	4628      	mov	r0, r5
 8004962:	47b0      	blx	r6
 8004964:	2800      	cmp	r0, #0
 8004966:	dc06      	bgt.n	8004976 <__sflush_r+0xfe>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496e:	81a3      	strh	r3, [r4, #12]
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	e78e      	b.n	8004894 <__sflush_r+0x1c>
 8004976:	4407      	add	r7, r0
 8004978:	eba8 0800 	sub.w	r8, r8, r0
 800497c:	e7e9      	b.n	8004952 <__sflush_r+0xda>
 800497e:	bf00      	nop
 8004980:	20400001 	.word	0x20400001

08004984 <_fflush_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	690b      	ldr	r3, [r1, #16]
 8004988:	4605      	mov	r5, r0
 800498a:	460c      	mov	r4, r1
 800498c:	b913      	cbnz	r3, 8004994 <_fflush_r+0x10>
 800498e:	2500      	movs	r5, #0
 8004990:	4628      	mov	r0, r5
 8004992:	bd38      	pop	{r3, r4, r5, pc}
 8004994:	b118      	cbz	r0, 800499e <_fflush_r+0x1a>
 8004996:	6983      	ldr	r3, [r0, #24]
 8004998:	b90b      	cbnz	r3, 800499e <_fflush_r+0x1a>
 800499a:	f000 f887 	bl	8004aac <__sinit>
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <_fflush_r+0x6c>)
 80049a0:	429c      	cmp	r4, r3
 80049a2:	d11b      	bne.n	80049dc <_fflush_r+0x58>
 80049a4:	686c      	ldr	r4, [r5, #4]
 80049a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ef      	beq.n	800498e <_fflush_r+0xa>
 80049ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049b0:	07d0      	lsls	r0, r2, #31
 80049b2:	d404      	bmi.n	80049be <_fflush_r+0x3a>
 80049b4:	0599      	lsls	r1, r3, #22
 80049b6:	d402      	bmi.n	80049be <_fflush_r+0x3a>
 80049b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ba:	f000 f915 	bl	8004be8 <__retarget_lock_acquire_recursive>
 80049be:	4628      	mov	r0, r5
 80049c0:	4621      	mov	r1, r4
 80049c2:	f7ff ff59 	bl	8004878 <__sflush_r>
 80049c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049c8:	07da      	lsls	r2, r3, #31
 80049ca:	4605      	mov	r5, r0
 80049cc:	d4e0      	bmi.n	8004990 <_fflush_r+0xc>
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	059b      	lsls	r3, r3, #22
 80049d2:	d4dd      	bmi.n	8004990 <_fflush_r+0xc>
 80049d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049d6:	f000 f908 	bl	8004bea <__retarget_lock_release_recursive>
 80049da:	e7d9      	b.n	8004990 <_fflush_r+0xc>
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <_fflush_r+0x70>)
 80049de:	429c      	cmp	r4, r3
 80049e0:	d101      	bne.n	80049e6 <_fflush_r+0x62>
 80049e2:	68ac      	ldr	r4, [r5, #8]
 80049e4:	e7df      	b.n	80049a6 <_fflush_r+0x22>
 80049e6:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <_fflush_r+0x74>)
 80049e8:	429c      	cmp	r4, r3
 80049ea:	bf08      	it	eq
 80049ec:	68ec      	ldreq	r4, [r5, #12]
 80049ee:	e7da      	b.n	80049a6 <_fflush_r+0x22>
 80049f0:	0800eb04 	.word	0x0800eb04
 80049f4:	0800eb24 	.word	0x0800eb24
 80049f8:	0800eae4 	.word	0x0800eae4

080049fc <std>:
 80049fc:	2300      	movs	r3, #0
 80049fe:	b510      	push	{r4, lr}
 8004a00:	4604      	mov	r4, r0
 8004a02:	e9c0 3300 	strd	r3, r3, [r0]
 8004a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a0a:	6083      	str	r3, [r0, #8]
 8004a0c:	8181      	strh	r1, [r0, #12]
 8004a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a10:	81c2      	strh	r2, [r0, #14]
 8004a12:	6183      	str	r3, [r0, #24]
 8004a14:	4619      	mov	r1, r3
 8004a16:	2208      	movs	r2, #8
 8004a18:	305c      	adds	r0, #92	; 0x5c
 8004a1a:	f7ff fdd7 	bl	80045cc <memset>
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <std+0x38>)
 8004a20:	6263      	str	r3, [r4, #36]	; 0x24
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <std+0x3c>)
 8004a24:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <std+0x40>)
 8004a28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <std+0x44>)
 8004a2c:	6224      	str	r4, [r4, #32]
 8004a2e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a30:	bd10      	pop	{r4, pc}
 8004a32:	bf00      	nop
 8004a34:	08005475 	.word	0x08005475
 8004a38:	08005497 	.word	0x08005497
 8004a3c:	080054cf 	.word	0x080054cf
 8004a40:	080054f3 	.word	0x080054f3

08004a44 <_cleanup_r>:
 8004a44:	4901      	ldr	r1, [pc, #4]	; (8004a4c <_cleanup_r+0x8>)
 8004a46:	f000 b8af 	b.w	8004ba8 <_fwalk_reent>
 8004a4a:	bf00      	nop
 8004a4c:	08004985 	.word	0x08004985

08004a50 <__sfmoreglue>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	2268      	movs	r2, #104	; 0x68
 8004a54:	1e4d      	subs	r5, r1, #1
 8004a56:	4355      	muls	r5, r2
 8004a58:	460e      	mov	r6, r1
 8004a5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a5e:	f000 f997 	bl	8004d90 <_malloc_r>
 8004a62:	4604      	mov	r4, r0
 8004a64:	b140      	cbz	r0, 8004a78 <__sfmoreglue+0x28>
 8004a66:	2100      	movs	r1, #0
 8004a68:	e9c0 1600 	strd	r1, r6, [r0]
 8004a6c:	300c      	adds	r0, #12
 8004a6e:	60a0      	str	r0, [r4, #8]
 8004a70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a74:	f7ff fdaa 	bl	80045cc <memset>
 8004a78:	4620      	mov	r0, r4
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}

08004a7c <__sfp_lock_acquire>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	; (8004a84 <__sfp_lock_acquire+0x8>)
 8004a7e:	f000 b8b3 	b.w	8004be8 <__retarget_lock_acquire_recursive>
 8004a82:	bf00      	nop
 8004a84:	24000125 	.word	0x24000125

08004a88 <__sfp_lock_release>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__sfp_lock_release+0x8>)
 8004a8a:	f000 b8ae 	b.w	8004bea <__retarget_lock_release_recursive>
 8004a8e:	bf00      	nop
 8004a90:	24000125 	.word	0x24000125

08004a94 <__sinit_lock_acquire>:
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <__sinit_lock_acquire+0x8>)
 8004a96:	f000 b8a7 	b.w	8004be8 <__retarget_lock_acquire_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	24000126 	.word	0x24000126

08004aa0 <__sinit_lock_release>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	; (8004aa8 <__sinit_lock_release+0x8>)
 8004aa2:	f000 b8a2 	b.w	8004bea <__retarget_lock_release_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	24000126 	.word	0x24000126

08004aac <__sinit>:
 8004aac:	b510      	push	{r4, lr}
 8004aae:	4604      	mov	r4, r0
 8004ab0:	f7ff fff0 	bl	8004a94 <__sinit_lock_acquire>
 8004ab4:	69a3      	ldr	r3, [r4, #24]
 8004ab6:	b11b      	cbz	r3, 8004ac0 <__sinit+0x14>
 8004ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004abc:	f7ff bff0 	b.w	8004aa0 <__sinit_lock_release>
 8004ac0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ac4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ac6:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <__sinit+0x68>)
 8004ac8:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <__sinit+0x6c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ace:	42a3      	cmp	r3, r4
 8004ad0:	bf04      	itt	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	61a3      	streq	r3, [r4, #24]
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f000 f820 	bl	8004b1c <__sfp>
 8004adc:	6060      	str	r0, [r4, #4]
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 f81c 	bl	8004b1c <__sfp>
 8004ae4:	60a0      	str	r0, [r4, #8]
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f000 f818 	bl	8004b1c <__sfp>
 8004aec:	2200      	movs	r2, #0
 8004aee:	60e0      	str	r0, [r4, #12]
 8004af0:	2104      	movs	r1, #4
 8004af2:	6860      	ldr	r0, [r4, #4]
 8004af4:	f7ff ff82 	bl	80049fc <std>
 8004af8:	68a0      	ldr	r0, [r4, #8]
 8004afa:	2201      	movs	r2, #1
 8004afc:	2109      	movs	r1, #9
 8004afe:	f7ff ff7d 	bl	80049fc <std>
 8004b02:	68e0      	ldr	r0, [r4, #12]
 8004b04:	2202      	movs	r2, #2
 8004b06:	2112      	movs	r1, #18
 8004b08:	f7ff ff78 	bl	80049fc <std>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	61a3      	str	r3, [r4, #24]
 8004b10:	e7d2      	b.n	8004ab8 <__sinit+0xc>
 8004b12:	bf00      	nop
 8004b14:	0800eae0 	.word	0x0800eae0
 8004b18:	08004a45 	.word	0x08004a45

08004b1c <__sfp>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	4607      	mov	r7, r0
 8004b20:	f7ff ffac 	bl	8004a7c <__sfp_lock_acquire>
 8004b24:	4b1e      	ldr	r3, [pc, #120]	; (8004ba0 <__sfp+0x84>)
 8004b26:	681e      	ldr	r6, [r3, #0]
 8004b28:	69b3      	ldr	r3, [r6, #24]
 8004b2a:	b913      	cbnz	r3, 8004b32 <__sfp+0x16>
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f7ff ffbd 	bl	8004aac <__sinit>
 8004b32:	3648      	adds	r6, #72	; 0x48
 8004b34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	d503      	bpl.n	8004b44 <__sfp+0x28>
 8004b3c:	6833      	ldr	r3, [r6, #0]
 8004b3e:	b30b      	cbz	r3, 8004b84 <__sfp+0x68>
 8004b40:	6836      	ldr	r6, [r6, #0]
 8004b42:	e7f7      	b.n	8004b34 <__sfp+0x18>
 8004b44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b48:	b9d5      	cbnz	r5, 8004b80 <__sfp+0x64>
 8004b4a:	4b16      	ldr	r3, [pc, #88]	; (8004ba4 <__sfp+0x88>)
 8004b4c:	60e3      	str	r3, [r4, #12]
 8004b4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b52:	6665      	str	r5, [r4, #100]	; 0x64
 8004b54:	f000 f847 	bl	8004be6 <__retarget_lock_init_recursive>
 8004b58:	f7ff ff96 	bl	8004a88 <__sfp_lock_release>
 8004b5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b64:	6025      	str	r5, [r4, #0]
 8004b66:	61a5      	str	r5, [r4, #24]
 8004b68:	2208      	movs	r2, #8
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b70:	f7ff fd2c 	bl	80045cc <memset>
 8004b74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b80:	3468      	adds	r4, #104	; 0x68
 8004b82:	e7d9      	b.n	8004b38 <__sfp+0x1c>
 8004b84:	2104      	movs	r1, #4
 8004b86:	4638      	mov	r0, r7
 8004b88:	f7ff ff62 	bl	8004a50 <__sfmoreglue>
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	6030      	str	r0, [r6, #0]
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d1d5      	bne.n	8004b40 <__sfp+0x24>
 8004b94:	f7ff ff78 	bl	8004a88 <__sfp_lock_release>
 8004b98:	230c      	movs	r3, #12
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	e7ee      	b.n	8004b7c <__sfp+0x60>
 8004b9e:	bf00      	nop
 8004ba0:	0800eae0 	.word	0x0800eae0
 8004ba4:	ffff0001 	.word	0xffff0001

08004ba8 <_fwalk_reent>:
 8004ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bac:	4606      	mov	r6, r0
 8004bae:	4688      	mov	r8, r1
 8004bb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bb4:	2700      	movs	r7, #0
 8004bb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bba:	f1b9 0901 	subs.w	r9, r9, #1
 8004bbe:	d505      	bpl.n	8004bcc <_fwalk_reent+0x24>
 8004bc0:	6824      	ldr	r4, [r4, #0]
 8004bc2:	2c00      	cmp	r4, #0
 8004bc4:	d1f7      	bne.n	8004bb6 <_fwalk_reent+0xe>
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bcc:	89ab      	ldrh	r3, [r5, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d907      	bls.n	8004be2 <_fwalk_reent+0x3a>
 8004bd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	d003      	beq.n	8004be2 <_fwalk_reent+0x3a>
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4630      	mov	r0, r6
 8004bde:	47c0      	blx	r8
 8004be0:	4307      	orrs	r7, r0
 8004be2:	3568      	adds	r5, #104	; 0x68
 8004be4:	e7e9      	b.n	8004bba <_fwalk_reent+0x12>

08004be6 <__retarget_lock_init_recursive>:
 8004be6:	4770      	bx	lr

08004be8 <__retarget_lock_acquire_recursive>:
 8004be8:	4770      	bx	lr

08004bea <__retarget_lock_release_recursive>:
 8004bea:	4770      	bx	lr

08004bec <__swhatbuf_r>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	460e      	mov	r6, r1
 8004bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf4:	2900      	cmp	r1, #0
 8004bf6:	b096      	sub	sp, #88	; 0x58
 8004bf8:	4614      	mov	r4, r2
 8004bfa:	461d      	mov	r5, r3
 8004bfc:	da08      	bge.n	8004c10 <__swhatbuf_r+0x24>
 8004bfe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	602a      	str	r2, [r5, #0]
 8004c06:	061a      	lsls	r2, r3, #24
 8004c08:	d410      	bmi.n	8004c2c <__swhatbuf_r+0x40>
 8004c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c0e:	e00e      	b.n	8004c2e <__swhatbuf_r+0x42>
 8004c10:	466a      	mov	r2, sp
 8004c12:	f000 fc95 	bl	8005540 <_fstat_r>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	dbf1      	blt.n	8004bfe <__swhatbuf_r+0x12>
 8004c1a:	9a01      	ldr	r2, [sp, #4]
 8004c1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c24:	425a      	negs	r2, r3
 8004c26:	415a      	adcs	r2, r3
 8004c28:	602a      	str	r2, [r5, #0]
 8004c2a:	e7ee      	b.n	8004c0a <__swhatbuf_r+0x1e>
 8004c2c:	2340      	movs	r3, #64	; 0x40
 8004c2e:	2000      	movs	r0, #0
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	b016      	add	sp, #88	; 0x58
 8004c34:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c38 <__smakebuf_r>:
 8004c38:	898b      	ldrh	r3, [r1, #12]
 8004c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c3c:	079d      	lsls	r5, r3, #30
 8004c3e:	4606      	mov	r6, r0
 8004c40:	460c      	mov	r4, r1
 8004c42:	d507      	bpl.n	8004c54 <__smakebuf_r+0x1c>
 8004c44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	6123      	str	r3, [r4, #16]
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	6163      	str	r3, [r4, #20]
 8004c50:	b002      	add	sp, #8
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
 8004c54:	ab01      	add	r3, sp, #4
 8004c56:	466a      	mov	r2, sp
 8004c58:	f7ff ffc8 	bl	8004bec <__swhatbuf_r>
 8004c5c:	9900      	ldr	r1, [sp, #0]
 8004c5e:	4605      	mov	r5, r0
 8004c60:	4630      	mov	r0, r6
 8004c62:	f000 f895 	bl	8004d90 <_malloc_r>
 8004c66:	b948      	cbnz	r0, 8004c7c <__smakebuf_r+0x44>
 8004c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6c:	059a      	lsls	r2, r3, #22
 8004c6e:	d4ef      	bmi.n	8004c50 <__smakebuf_r+0x18>
 8004c70:	f023 0303 	bic.w	r3, r3, #3
 8004c74:	f043 0302 	orr.w	r3, r3, #2
 8004c78:	81a3      	strh	r3, [r4, #12]
 8004c7a:	e7e3      	b.n	8004c44 <__smakebuf_r+0xc>
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <__smakebuf_r+0x7c>)
 8004c7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	6020      	str	r0, [r4, #0]
 8004c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c88:	81a3      	strh	r3, [r4, #12]
 8004c8a:	9b00      	ldr	r3, [sp, #0]
 8004c8c:	6163      	str	r3, [r4, #20]
 8004c8e:	9b01      	ldr	r3, [sp, #4]
 8004c90:	6120      	str	r0, [r4, #16]
 8004c92:	b15b      	cbz	r3, 8004cac <__smakebuf_r+0x74>
 8004c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f000 fc63 	bl	8005564 <_isatty_r>
 8004c9e:	b128      	cbz	r0, 8004cac <__smakebuf_r+0x74>
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	81a3      	strh	r3, [r4, #12]
 8004cac:	89a0      	ldrh	r0, [r4, #12]
 8004cae:	4305      	orrs	r5, r0
 8004cb0:	81a5      	strh	r5, [r4, #12]
 8004cb2:	e7cd      	b.n	8004c50 <__smakebuf_r+0x18>
 8004cb4:	08004a45 	.word	0x08004a45

08004cb8 <_free_r>:
 8004cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cba:	2900      	cmp	r1, #0
 8004cbc:	d044      	beq.n	8004d48 <_free_r+0x90>
 8004cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cc2:	9001      	str	r0, [sp, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f1a1 0404 	sub.w	r4, r1, #4
 8004cca:	bfb8      	it	lt
 8004ccc:	18e4      	addlt	r4, r4, r3
 8004cce:	f000 fc6b 	bl	80055a8 <__malloc_lock>
 8004cd2:	4a1e      	ldr	r2, [pc, #120]	; (8004d4c <_free_r+0x94>)
 8004cd4:	9801      	ldr	r0, [sp, #4]
 8004cd6:	6813      	ldr	r3, [r2, #0]
 8004cd8:	b933      	cbnz	r3, 8004ce8 <_free_r+0x30>
 8004cda:	6063      	str	r3, [r4, #4]
 8004cdc:	6014      	str	r4, [r2, #0]
 8004cde:	b003      	add	sp, #12
 8004ce0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ce4:	f000 bc66 	b.w	80055b4 <__malloc_unlock>
 8004ce8:	42a3      	cmp	r3, r4
 8004cea:	d908      	bls.n	8004cfe <_free_r+0x46>
 8004cec:	6825      	ldr	r5, [r4, #0]
 8004cee:	1961      	adds	r1, r4, r5
 8004cf0:	428b      	cmp	r3, r1
 8004cf2:	bf01      	itttt	eq
 8004cf4:	6819      	ldreq	r1, [r3, #0]
 8004cf6:	685b      	ldreq	r3, [r3, #4]
 8004cf8:	1949      	addeq	r1, r1, r5
 8004cfa:	6021      	streq	r1, [r4, #0]
 8004cfc:	e7ed      	b.n	8004cda <_free_r+0x22>
 8004cfe:	461a      	mov	r2, r3
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	b10b      	cbz	r3, 8004d08 <_free_r+0x50>
 8004d04:	42a3      	cmp	r3, r4
 8004d06:	d9fa      	bls.n	8004cfe <_free_r+0x46>
 8004d08:	6811      	ldr	r1, [r2, #0]
 8004d0a:	1855      	adds	r5, r2, r1
 8004d0c:	42a5      	cmp	r5, r4
 8004d0e:	d10b      	bne.n	8004d28 <_free_r+0x70>
 8004d10:	6824      	ldr	r4, [r4, #0]
 8004d12:	4421      	add	r1, r4
 8004d14:	1854      	adds	r4, r2, r1
 8004d16:	42a3      	cmp	r3, r4
 8004d18:	6011      	str	r1, [r2, #0]
 8004d1a:	d1e0      	bne.n	8004cde <_free_r+0x26>
 8004d1c:	681c      	ldr	r4, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	6053      	str	r3, [r2, #4]
 8004d22:	4421      	add	r1, r4
 8004d24:	6011      	str	r1, [r2, #0]
 8004d26:	e7da      	b.n	8004cde <_free_r+0x26>
 8004d28:	d902      	bls.n	8004d30 <_free_r+0x78>
 8004d2a:	230c      	movs	r3, #12
 8004d2c:	6003      	str	r3, [r0, #0]
 8004d2e:	e7d6      	b.n	8004cde <_free_r+0x26>
 8004d30:	6825      	ldr	r5, [r4, #0]
 8004d32:	1961      	adds	r1, r4, r5
 8004d34:	428b      	cmp	r3, r1
 8004d36:	bf04      	itt	eq
 8004d38:	6819      	ldreq	r1, [r3, #0]
 8004d3a:	685b      	ldreq	r3, [r3, #4]
 8004d3c:	6063      	str	r3, [r4, #4]
 8004d3e:	bf04      	itt	eq
 8004d40:	1949      	addeq	r1, r1, r5
 8004d42:	6021      	streq	r1, [r4, #0]
 8004d44:	6054      	str	r4, [r2, #4]
 8004d46:	e7ca      	b.n	8004cde <_free_r+0x26>
 8004d48:	b003      	add	sp, #12
 8004d4a:	bd30      	pop	{r4, r5, pc}
 8004d4c:	24000128 	.word	0x24000128

08004d50 <sbrk_aligned>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	4e0e      	ldr	r6, [pc, #56]	; (8004d8c <sbrk_aligned+0x3c>)
 8004d54:	460c      	mov	r4, r1
 8004d56:	6831      	ldr	r1, [r6, #0]
 8004d58:	4605      	mov	r5, r0
 8004d5a:	b911      	cbnz	r1, 8004d62 <sbrk_aligned+0x12>
 8004d5c:	f000 fb7a 	bl	8005454 <_sbrk_r>
 8004d60:	6030      	str	r0, [r6, #0]
 8004d62:	4621      	mov	r1, r4
 8004d64:	4628      	mov	r0, r5
 8004d66:	f000 fb75 	bl	8005454 <_sbrk_r>
 8004d6a:	1c43      	adds	r3, r0, #1
 8004d6c:	d00a      	beq.n	8004d84 <sbrk_aligned+0x34>
 8004d6e:	1cc4      	adds	r4, r0, #3
 8004d70:	f024 0403 	bic.w	r4, r4, #3
 8004d74:	42a0      	cmp	r0, r4
 8004d76:	d007      	beq.n	8004d88 <sbrk_aligned+0x38>
 8004d78:	1a21      	subs	r1, r4, r0
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f000 fb6a 	bl	8005454 <_sbrk_r>
 8004d80:	3001      	adds	r0, #1
 8004d82:	d101      	bne.n	8004d88 <sbrk_aligned+0x38>
 8004d84:	f04f 34ff 	mov.w	r4, #4294967295
 8004d88:	4620      	mov	r0, r4
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
 8004d8c:	2400012c 	.word	0x2400012c

08004d90 <_malloc_r>:
 8004d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d94:	1ccd      	adds	r5, r1, #3
 8004d96:	f025 0503 	bic.w	r5, r5, #3
 8004d9a:	3508      	adds	r5, #8
 8004d9c:	2d0c      	cmp	r5, #12
 8004d9e:	bf38      	it	cc
 8004da0:	250c      	movcc	r5, #12
 8004da2:	2d00      	cmp	r5, #0
 8004da4:	4607      	mov	r7, r0
 8004da6:	db01      	blt.n	8004dac <_malloc_r+0x1c>
 8004da8:	42a9      	cmp	r1, r5
 8004daa:	d905      	bls.n	8004db8 <_malloc_r+0x28>
 8004dac:	230c      	movs	r3, #12
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	2600      	movs	r6, #0
 8004db2:	4630      	mov	r0, r6
 8004db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004db8:	4e2e      	ldr	r6, [pc, #184]	; (8004e74 <_malloc_r+0xe4>)
 8004dba:	f000 fbf5 	bl	80055a8 <__malloc_lock>
 8004dbe:	6833      	ldr	r3, [r6, #0]
 8004dc0:	461c      	mov	r4, r3
 8004dc2:	bb34      	cbnz	r4, 8004e12 <_malloc_r+0x82>
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	f7ff ffc2 	bl	8004d50 <sbrk_aligned>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	4604      	mov	r4, r0
 8004dd0:	d14d      	bne.n	8004e6e <_malloc_r+0xde>
 8004dd2:	6834      	ldr	r4, [r6, #0]
 8004dd4:	4626      	mov	r6, r4
 8004dd6:	2e00      	cmp	r6, #0
 8004dd8:	d140      	bne.n	8004e5c <_malloc_r+0xcc>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	4631      	mov	r1, r6
 8004dde:	4638      	mov	r0, r7
 8004de0:	eb04 0803 	add.w	r8, r4, r3
 8004de4:	f000 fb36 	bl	8005454 <_sbrk_r>
 8004de8:	4580      	cmp	r8, r0
 8004dea:	d13a      	bne.n	8004e62 <_malloc_r+0xd2>
 8004dec:	6821      	ldr	r1, [r4, #0]
 8004dee:	3503      	adds	r5, #3
 8004df0:	1a6d      	subs	r5, r5, r1
 8004df2:	f025 0503 	bic.w	r5, r5, #3
 8004df6:	3508      	adds	r5, #8
 8004df8:	2d0c      	cmp	r5, #12
 8004dfa:	bf38      	it	cc
 8004dfc:	250c      	movcc	r5, #12
 8004dfe:	4629      	mov	r1, r5
 8004e00:	4638      	mov	r0, r7
 8004e02:	f7ff ffa5 	bl	8004d50 <sbrk_aligned>
 8004e06:	3001      	adds	r0, #1
 8004e08:	d02b      	beq.n	8004e62 <_malloc_r+0xd2>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	442b      	add	r3, r5
 8004e0e:	6023      	str	r3, [r4, #0]
 8004e10:	e00e      	b.n	8004e30 <_malloc_r+0xa0>
 8004e12:	6822      	ldr	r2, [r4, #0]
 8004e14:	1b52      	subs	r2, r2, r5
 8004e16:	d41e      	bmi.n	8004e56 <_malloc_r+0xc6>
 8004e18:	2a0b      	cmp	r2, #11
 8004e1a:	d916      	bls.n	8004e4a <_malloc_r+0xba>
 8004e1c:	1961      	adds	r1, r4, r5
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	6025      	str	r5, [r4, #0]
 8004e22:	bf18      	it	ne
 8004e24:	6059      	strne	r1, [r3, #4]
 8004e26:	6863      	ldr	r3, [r4, #4]
 8004e28:	bf08      	it	eq
 8004e2a:	6031      	streq	r1, [r6, #0]
 8004e2c:	5162      	str	r2, [r4, r5]
 8004e2e:	604b      	str	r3, [r1, #4]
 8004e30:	4638      	mov	r0, r7
 8004e32:	f104 060b 	add.w	r6, r4, #11
 8004e36:	f000 fbbd 	bl	80055b4 <__malloc_unlock>
 8004e3a:	f026 0607 	bic.w	r6, r6, #7
 8004e3e:	1d23      	adds	r3, r4, #4
 8004e40:	1af2      	subs	r2, r6, r3
 8004e42:	d0b6      	beq.n	8004db2 <_malloc_r+0x22>
 8004e44:	1b9b      	subs	r3, r3, r6
 8004e46:	50a3      	str	r3, [r4, r2]
 8004e48:	e7b3      	b.n	8004db2 <_malloc_r+0x22>
 8004e4a:	6862      	ldr	r2, [r4, #4]
 8004e4c:	42a3      	cmp	r3, r4
 8004e4e:	bf0c      	ite	eq
 8004e50:	6032      	streq	r2, [r6, #0]
 8004e52:	605a      	strne	r2, [r3, #4]
 8004e54:	e7ec      	b.n	8004e30 <_malloc_r+0xa0>
 8004e56:	4623      	mov	r3, r4
 8004e58:	6864      	ldr	r4, [r4, #4]
 8004e5a:	e7b2      	b.n	8004dc2 <_malloc_r+0x32>
 8004e5c:	4634      	mov	r4, r6
 8004e5e:	6876      	ldr	r6, [r6, #4]
 8004e60:	e7b9      	b.n	8004dd6 <_malloc_r+0x46>
 8004e62:	230c      	movs	r3, #12
 8004e64:	603b      	str	r3, [r7, #0]
 8004e66:	4638      	mov	r0, r7
 8004e68:	f000 fba4 	bl	80055b4 <__malloc_unlock>
 8004e6c:	e7a1      	b.n	8004db2 <_malloc_r+0x22>
 8004e6e:	6025      	str	r5, [r4, #0]
 8004e70:	e7de      	b.n	8004e30 <_malloc_r+0xa0>
 8004e72:	bf00      	nop
 8004e74:	24000128 	.word	0x24000128

08004e78 <__sfputc_r>:
 8004e78:	6893      	ldr	r3, [r2, #8]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	b410      	push	{r4}
 8004e80:	6093      	str	r3, [r2, #8]
 8004e82:	da08      	bge.n	8004e96 <__sfputc_r+0x1e>
 8004e84:	6994      	ldr	r4, [r2, #24]
 8004e86:	42a3      	cmp	r3, r4
 8004e88:	db01      	blt.n	8004e8e <__sfputc_r+0x16>
 8004e8a:	290a      	cmp	r1, #10
 8004e8c:	d103      	bne.n	8004e96 <__sfputc_r+0x1e>
 8004e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e92:	f7ff bc31 	b.w	80046f8 <__swbuf_r>
 8004e96:	6813      	ldr	r3, [r2, #0]
 8004e98:	1c58      	adds	r0, r3, #1
 8004e9a:	6010      	str	r0, [r2, #0]
 8004e9c:	7019      	strb	r1, [r3, #0]
 8004e9e:	4608      	mov	r0, r1
 8004ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <__sfputs_r>:
 8004ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	460f      	mov	r7, r1
 8004eac:	4614      	mov	r4, r2
 8004eae:	18d5      	adds	r5, r2, r3
 8004eb0:	42ac      	cmp	r4, r5
 8004eb2:	d101      	bne.n	8004eb8 <__sfputs_r+0x12>
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	e007      	b.n	8004ec8 <__sfputs_r+0x22>
 8004eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ebc:	463a      	mov	r2, r7
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f7ff ffda 	bl	8004e78 <__sfputc_r>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d1f3      	bne.n	8004eb0 <__sfputs_r+0xa>
 8004ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ecc <_vfiprintf_r>:
 8004ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed0:	460d      	mov	r5, r1
 8004ed2:	b09d      	sub	sp, #116	; 0x74
 8004ed4:	4614      	mov	r4, r2
 8004ed6:	4698      	mov	r8, r3
 8004ed8:	4606      	mov	r6, r0
 8004eda:	b118      	cbz	r0, 8004ee4 <_vfiprintf_r+0x18>
 8004edc:	6983      	ldr	r3, [r0, #24]
 8004ede:	b90b      	cbnz	r3, 8004ee4 <_vfiprintf_r+0x18>
 8004ee0:	f7ff fde4 	bl	8004aac <__sinit>
 8004ee4:	4b89      	ldr	r3, [pc, #548]	; (800510c <_vfiprintf_r+0x240>)
 8004ee6:	429d      	cmp	r5, r3
 8004ee8:	d11b      	bne.n	8004f22 <_vfiprintf_r+0x56>
 8004eea:	6875      	ldr	r5, [r6, #4]
 8004eec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004eee:	07d9      	lsls	r1, r3, #31
 8004ef0:	d405      	bmi.n	8004efe <_vfiprintf_r+0x32>
 8004ef2:	89ab      	ldrh	r3, [r5, #12]
 8004ef4:	059a      	lsls	r2, r3, #22
 8004ef6:	d402      	bmi.n	8004efe <_vfiprintf_r+0x32>
 8004ef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004efa:	f7ff fe75 	bl	8004be8 <__retarget_lock_acquire_recursive>
 8004efe:	89ab      	ldrh	r3, [r5, #12]
 8004f00:	071b      	lsls	r3, r3, #28
 8004f02:	d501      	bpl.n	8004f08 <_vfiprintf_r+0x3c>
 8004f04:	692b      	ldr	r3, [r5, #16]
 8004f06:	b9eb      	cbnz	r3, 8004f44 <_vfiprintf_r+0x78>
 8004f08:	4629      	mov	r1, r5
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f7ff fc46 	bl	800479c <__swsetup_r>
 8004f10:	b1c0      	cbz	r0, 8004f44 <_vfiprintf_r+0x78>
 8004f12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f14:	07dc      	lsls	r4, r3, #31
 8004f16:	d50e      	bpl.n	8004f36 <_vfiprintf_r+0x6a>
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1c:	b01d      	add	sp, #116	; 0x74
 8004f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f22:	4b7b      	ldr	r3, [pc, #492]	; (8005110 <_vfiprintf_r+0x244>)
 8004f24:	429d      	cmp	r5, r3
 8004f26:	d101      	bne.n	8004f2c <_vfiprintf_r+0x60>
 8004f28:	68b5      	ldr	r5, [r6, #8]
 8004f2a:	e7df      	b.n	8004eec <_vfiprintf_r+0x20>
 8004f2c:	4b79      	ldr	r3, [pc, #484]	; (8005114 <_vfiprintf_r+0x248>)
 8004f2e:	429d      	cmp	r5, r3
 8004f30:	bf08      	it	eq
 8004f32:	68f5      	ldreq	r5, [r6, #12]
 8004f34:	e7da      	b.n	8004eec <_vfiprintf_r+0x20>
 8004f36:	89ab      	ldrh	r3, [r5, #12]
 8004f38:	0598      	lsls	r0, r3, #22
 8004f3a:	d4ed      	bmi.n	8004f18 <_vfiprintf_r+0x4c>
 8004f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f3e:	f7ff fe54 	bl	8004bea <__retarget_lock_release_recursive>
 8004f42:	e7e9      	b.n	8004f18 <_vfiprintf_r+0x4c>
 8004f44:	2300      	movs	r3, #0
 8004f46:	9309      	str	r3, [sp, #36]	; 0x24
 8004f48:	2320      	movs	r3, #32
 8004f4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f52:	2330      	movs	r3, #48	; 0x30
 8004f54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005118 <_vfiprintf_r+0x24c>
 8004f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f5c:	f04f 0901 	mov.w	r9, #1
 8004f60:	4623      	mov	r3, r4
 8004f62:	469a      	mov	sl, r3
 8004f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f68:	b10a      	cbz	r2, 8004f6e <_vfiprintf_r+0xa2>
 8004f6a:	2a25      	cmp	r2, #37	; 0x25
 8004f6c:	d1f9      	bne.n	8004f62 <_vfiprintf_r+0x96>
 8004f6e:	ebba 0b04 	subs.w	fp, sl, r4
 8004f72:	d00b      	beq.n	8004f8c <_vfiprintf_r+0xc0>
 8004f74:	465b      	mov	r3, fp
 8004f76:	4622      	mov	r2, r4
 8004f78:	4629      	mov	r1, r5
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	f7ff ff93 	bl	8004ea6 <__sfputs_r>
 8004f80:	3001      	adds	r0, #1
 8004f82:	f000 80aa 	beq.w	80050da <_vfiprintf_r+0x20e>
 8004f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f88:	445a      	add	r2, fp
 8004f8a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 80a2 	beq.w	80050da <_vfiprintf_r+0x20e>
 8004f96:	2300      	movs	r3, #0
 8004f98:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa0:	f10a 0a01 	add.w	sl, sl, #1
 8004fa4:	9304      	str	r3, [sp, #16]
 8004fa6:	9307      	str	r3, [sp, #28]
 8004fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fac:	931a      	str	r3, [sp, #104]	; 0x68
 8004fae:	4654      	mov	r4, sl
 8004fb0:	2205      	movs	r2, #5
 8004fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb6:	4858      	ldr	r0, [pc, #352]	; (8005118 <_vfiprintf_r+0x24c>)
 8004fb8:	f7fb f992 	bl	80002e0 <memchr>
 8004fbc:	9a04      	ldr	r2, [sp, #16]
 8004fbe:	b9d8      	cbnz	r0, 8004ff8 <_vfiprintf_r+0x12c>
 8004fc0:	06d1      	lsls	r1, r2, #27
 8004fc2:	bf44      	itt	mi
 8004fc4:	2320      	movmi	r3, #32
 8004fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fca:	0713      	lsls	r3, r2, #28
 8004fcc:	bf44      	itt	mi
 8004fce:	232b      	movmi	r3, #43	; 0x2b
 8004fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8004fda:	d015      	beq.n	8005008 <_vfiprintf_r+0x13c>
 8004fdc:	9a07      	ldr	r2, [sp, #28]
 8004fde:	4654      	mov	r4, sl
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	f04f 0c0a 	mov.w	ip, #10
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fec:	3b30      	subs	r3, #48	; 0x30
 8004fee:	2b09      	cmp	r3, #9
 8004ff0:	d94e      	bls.n	8005090 <_vfiprintf_r+0x1c4>
 8004ff2:	b1b0      	cbz	r0, 8005022 <_vfiprintf_r+0x156>
 8004ff4:	9207      	str	r2, [sp, #28]
 8004ff6:	e014      	b.n	8005022 <_vfiprintf_r+0x156>
 8004ff8:	eba0 0308 	sub.w	r3, r0, r8
 8004ffc:	fa09 f303 	lsl.w	r3, r9, r3
 8005000:	4313      	orrs	r3, r2
 8005002:	9304      	str	r3, [sp, #16]
 8005004:	46a2      	mov	sl, r4
 8005006:	e7d2      	b.n	8004fae <_vfiprintf_r+0xe2>
 8005008:	9b03      	ldr	r3, [sp, #12]
 800500a:	1d19      	adds	r1, r3, #4
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	9103      	str	r1, [sp, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	bfbb      	ittet	lt
 8005014:	425b      	neglt	r3, r3
 8005016:	f042 0202 	orrlt.w	r2, r2, #2
 800501a:	9307      	strge	r3, [sp, #28]
 800501c:	9307      	strlt	r3, [sp, #28]
 800501e:	bfb8      	it	lt
 8005020:	9204      	strlt	r2, [sp, #16]
 8005022:	7823      	ldrb	r3, [r4, #0]
 8005024:	2b2e      	cmp	r3, #46	; 0x2e
 8005026:	d10c      	bne.n	8005042 <_vfiprintf_r+0x176>
 8005028:	7863      	ldrb	r3, [r4, #1]
 800502a:	2b2a      	cmp	r3, #42	; 0x2a
 800502c:	d135      	bne.n	800509a <_vfiprintf_r+0x1ce>
 800502e:	9b03      	ldr	r3, [sp, #12]
 8005030:	1d1a      	adds	r2, r3, #4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	9203      	str	r2, [sp, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	bfb8      	it	lt
 800503a:	f04f 33ff 	movlt.w	r3, #4294967295
 800503e:	3402      	adds	r4, #2
 8005040:	9305      	str	r3, [sp, #20]
 8005042:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005128 <_vfiprintf_r+0x25c>
 8005046:	7821      	ldrb	r1, [r4, #0]
 8005048:	2203      	movs	r2, #3
 800504a:	4650      	mov	r0, sl
 800504c:	f7fb f948 	bl	80002e0 <memchr>
 8005050:	b140      	cbz	r0, 8005064 <_vfiprintf_r+0x198>
 8005052:	2340      	movs	r3, #64	; 0x40
 8005054:	eba0 000a 	sub.w	r0, r0, sl
 8005058:	fa03 f000 	lsl.w	r0, r3, r0
 800505c:	9b04      	ldr	r3, [sp, #16]
 800505e:	4303      	orrs	r3, r0
 8005060:	3401      	adds	r4, #1
 8005062:	9304      	str	r3, [sp, #16]
 8005064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005068:	482c      	ldr	r0, [pc, #176]	; (800511c <_vfiprintf_r+0x250>)
 800506a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800506e:	2206      	movs	r2, #6
 8005070:	f7fb f936 	bl	80002e0 <memchr>
 8005074:	2800      	cmp	r0, #0
 8005076:	d03f      	beq.n	80050f8 <_vfiprintf_r+0x22c>
 8005078:	4b29      	ldr	r3, [pc, #164]	; (8005120 <_vfiprintf_r+0x254>)
 800507a:	bb1b      	cbnz	r3, 80050c4 <_vfiprintf_r+0x1f8>
 800507c:	9b03      	ldr	r3, [sp, #12]
 800507e:	3307      	adds	r3, #7
 8005080:	f023 0307 	bic.w	r3, r3, #7
 8005084:	3308      	adds	r3, #8
 8005086:	9303      	str	r3, [sp, #12]
 8005088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800508a:	443b      	add	r3, r7
 800508c:	9309      	str	r3, [sp, #36]	; 0x24
 800508e:	e767      	b.n	8004f60 <_vfiprintf_r+0x94>
 8005090:	fb0c 3202 	mla	r2, ip, r2, r3
 8005094:	460c      	mov	r4, r1
 8005096:	2001      	movs	r0, #1
 8005098:	e7a5      	b.n	8004fe6 <_vfiprintf_r+0x11a>
 800509a:	2300      	movs	r3, #0
 800509c:	3401      	adds	r4, #1
 800509e:	9305      	str	r3, [sp, #20]
 80050a0:	4619      	mov	r1, r3
 80050a2:	f04f 0c0a 	mov.w	ip, #10
 80050a6:	4620      	mov	r0, r4
 80050a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050ac:	3a30      	subs	r2, #48	; 0x30
 80050ae:	2a09      	cmp	r2, #9
 80050b0:	d903      	bls.n	80050ba <_vfiprintf_r+0x1ee>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0c5      	beq.n	8005042 <_vfiprintf_r+0x176>
 80050b6:	9105      	str	r1, [sp, #20]
 80050b8:	e7c3      	b.n	8005042 <_vfiprintf_r+0x176>
 80050ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80050be:	4604      	mov	r4, r0
 80050c0:	2301      	movs	r3, #1
 80050c2:	e7f0      	b.n	80050a6 <_vfiprintf_r+0x1da>
 80050c4:	ab03      	add	r3, sp, #12
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	462a      	mov	r2, r5
 80050ca:	4b16      	ldr	r3, [pc, #88]	; (8005124 <_vfiprintf_r+0x258>)
 80050cc:	a904      	add	r1, sp, #16
 80050ce:	4630      	mov	r0, r6
 80050d0:	f3af 8000 	nop.w
 80050d4:	4607      	mov	r7, r0
 80050d6:	1c78      	adds	r0, r7, #1
 80050d8:	d1d6      	bne.n	8005088 <_vfiprintf_r+0x1bc>
 80050da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050dc:	07d9      	lsls	r1, r3, #31
 80050de:	d405      	bmi.n	80050ec <_vfiprintf_r+0x220>
 80050e0:	89ab      	ldrh	r3, [r5, #12]
 80050e2:	059a      	lsls	r2, r3, #22
 80050e4:	d402      	bmi.n	80050ec <_vfiprintf_r+0x220>
 80050e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050e8:	f7ff fd7f 	bl	8004bea <__retarget_lock_release_recursive>
 80050ec:	89ab      	ldrh	r3, [r5, #12]
 80050ee:	065b      	lsls	r3, r3, #25
 80050f0:	f53f af12 	bmi.w	8004f18 <_vfiprintf_r+0x4c>
 80050f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050f6:	e711      	b.n	8004f1c <_vfiprintf_r+0x50>
 80050f8:	ab03      	add	r3, sp, #12
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	462a      	mov	r2, r5
 80050fe:	4b09      	ldr	r3, [pc, #36]	; (8005124 <_vfiprintf_r+0x258>)
 8005100:	a904      	add	r1, sp, #16
 8005102:	4630      	mov	r0, r6
 8005104:	f000 f880 	bl	8005208 <_printf_i>
 8005108:	e7e4      	b.n	80050d4 <_vfiprintf_r+0x208>
 800510a:	bf00      	nop
 800510c:	0800eb04 	.word	0x0800eb04
 8005110:	0800eb24 	.word	0x0800eb24
 8005114:	0800eae4 	.word	0x0800eae4
 8005118:	0800eb44 	.word	0x0800eb44
 800511c:	0800eb4e 	.word	0x0800eb4e
 8005120:	00000000 	.word	0x00000000
 8005124:	08004ea7 	.word	0x08004ea7
 8005128:	0800eb4a 	.word	0x0800eb4a

0800512c <_printf_common>:
 800512c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005130:	4616      	mov	r6, r2
 8005132:	4699      	mov	r9, r3
 8005134:	688a      	ldr	r2, [r1, #8]
 8005136:	690b      	ldr	r3, [r1, #16]
 8005138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800513c:	4293      	cmp	r3, r2
 800513e:	bfb8      	it	lt
 8005140:	4613      	movlt	r3, r2
 8005142:	6033      	str	r3, [r6, #0]
 8005144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005148:	4607      	mov	r7, r0
 800514a:	460c      	mov	r4, r1
 800514c:	b10a      	cbz	r2, 8005152 <_printf_common+0x26>
 800514e:	3301      	adds	r3, #1
 8005150:	6033      	str	r3, [r6, #0]
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	0699      	lsls	r1, r3, #26
 8005156:	bf42      	ittt	mi
 8005158:	6833      	ldrmi	r3, [r6, #0]
 800515a:	3302      	addmi	r3, #2
 800515c:	6033      	strmi	r3, [r6, #0]
 800515e:	6825      	ldr	r5, [r4, #0]
 8005160:	f015 0506 	ands.w	r5, r5, #6
 8005164:	d106      	bne.n	8005174 <_printf_common+0x48>
 8005166:	f104 0a19 	add.w	sl, r4, #25
 800516a:	68e3      	ldr	r3, [r4, #12]
 800516c:	6832      	ldr	r2, [r6, #0]
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	42ab      	cmp	r3, r5
 8005172:	dc26      	bgt.n	80051c2 <_printf_common+0x96>
 8005174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005178:	1e13      	subs	r3, r2, #0
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	bf18      	it	ne
 800517e:	2301      	movne	r3, #1
 8005180:	0692      	lsls	r2, r2, #26
 8005182:	d42b      	bmi.n	80051dc <_printf_common+0xb0>
 8005184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005188:	4649      	mov	r1, r9
 800518a:	4638      	mov	r0, r7
 800518c:	47c0      	blx	r8
 800518e:	3001      	adds	r0, #1
 8005190:	d01e      	beq.n	80051d0 <_printf_common+0xa4>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	68e5      	ldr	r5, [r4, #12]
 8005196:	6832      	ldr	r2, [r6, #0]
 8005198:	f003 0306 	and.w	r3, r3, #6
 800519c:	2b04      	cmp	r3, #4
 800519e:	bf08      	it	eq
 80051a0:	1aad      	subeq	r5, r5, r2
 80051a2:	68a3      	ldr	r3, [r4, #8]
 80051a4:	6922      	ldr	r2, [r4, #16]
 80051a6:	bf0c      	ite	eq
 80051a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051ac:	2500      	movne	r5, #0
 80051ae:	4293      	cmp	r3, r2
 80051b0:	bfc4      	itt	gt
 80051b2:	1a9b      	subgt	r3, r3, r2
 80051b4:	18ed      	addgt	r5, r5, r3
 80051b6:	2600      	movs	r6, #0
 80051b8:	341a      	adds	r4, #26
 80051ba:	42b5      	cmp	r5, r6
 80051bc:	d11a      	bne.n	80051f4 <_printf_common+0xc8>
 80051be:	2000      	movs	r0, #0
 80051c0:	e008      	b.n	80051d4 <_printf_common+0xa8>
 80051c2:	2301      	movs	r3, #1
 80051c4:	4652      	mov	r2, sl
 80051c6:	4649      	mov	r1, r9
 80051c8:	4638      	mov	r0, r7
 80051ca:	47c0      	blx	r8
 80051cc:	3001      	adds	r0, #1
 80051ce:	d103      	bne.n	80051d8 <_printf_common+0xac>
 80051d0:	f04f 30ff 	mov.w	r0, #4294967295
 80051d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d8:	3501      	adds	r5, #1
 80051da:	e7c6      	b.n	800516a <_printf_common+0x3e>
 80051dc:	18e1      	adds	r1, r4, r3
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	2030      	movs	r0, #48	; 0x30
 80051e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051e6:	4422      	add	r2, r4
 80051e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051f0:	3302      	adds	r3, #2
 80051f2:	e7c7      	b.n	8005184 <_printf_common+0x58>
 80051f4:	2301      	movs	r3, #1
 80051f6:	4622      	mov	r2, r4
 80051f8:	4649      	mov	r1, r9
 80051fa:	4638      	mov	r0, r7
 80051fc:	47c0      	blx	r8
 80051fe:	3001      	adds	r0, #1
 8005200:	d0e6      	beq.n	80051d0 <_printf_common+0xa4>
 8005202:	3601      	adds	r6, #1
 8005204:	e7d9      	b.n	80051ba <_printf_common+0x8e>
	...

08005208 <_printf_i>:
 8005208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	7e0f      	ldrb	r7, [r1, #24]
 800520e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005210:	2f78      	cmp	r7, #120	; 0x78
 8005212:	4691      	mov	r9, r2
 8005214:	4680      	mov	r8, r0
 8005216:	460c      	mov	r4, r1
 8005218:	469a      	mov	sl, r3
 800521a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800521e:	d807      	bhi.n	8005230 <_printf_i+0x28>
 8005220:	2f62      	cmp	r7, #98	; 0x62
 8005222:	d80a      	bhi.n	800523a <_printf_i+0x32>
 8005224:	2f00      	cmp	r7, #0
 8005226:	f000 80d8 	beq.w	80053da <_printf_i+0x1d2>
 800522a:	2f58      	cmp	r7, #88	; 0x58
 800522c:	f000 80a3 	beq.w	8005376 <_printf_i+0x16e>
 8005230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005238:	e03a      	b.n	80052b0 <_printf_i+0xa8>
 800523a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800523e:	2b15      	cmp	r3, #21
 8005240:	d8f6      	bhi.n	8005230 <_printf_i+0x28>
 8005242:	a101      	add	r1, pc, #4	; (adr r1, 8005248 <_printf_i+0x40>)
 8005244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005248:	080052a1 	.word	0x080052a1
 800524c:	080052b5 	.word	0x080052b5
 8005250:	08005231 	.word	0x08005231
 8005254:	08005231 	.word	0x08005231
 8005258:	08005231 	.word	0x08005231
 800525c:	08005231 	.word	0x08005231
 8005260:	080052b5 	.word	0x080052b5
 8005264:	08005231 	.word	0x08005231
 8005268:	08005231 	.word	0x08005231
 800526c:	08005231 	.word	0x08005231
 8005270:	08005231 	.word	0x08005231
 8005274:	080053c1 	.word	0x080053c1
 8005278:	080052e5 	.word	0x080052e5
 800527c:	080053a3 	.word	0x080053a3
 8005280:	08005231 	.word	0x08005231
 8005284:	08005231 	.word	0x08005231
 8005288:	080053e3 	.word	0x080053e3
 800528c:	08005231 	.word	0x08005231
 8005290:	080052e5 	.word	0x080052e5
 8005294:	08005231 	.word	0x08005231
 8005298:	08005231 	.word	0x08005231
 800529c:	080053ab 	.word	0x080053ab
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	1d1a      	adds	r2, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	602a      	str	r2, [r5, #0]
 80052a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0a3      	b.n	80053fc <_printf_i+0x1f4>
 80052b4:	6820      	ldr	r0, [r4, #0]
 80052b6:	6829      	ldr	r1, [r5, #0]
 80052b8:	0606      	lsls	r6, r0, #24
 80052ba:	f101 0304 	add.w	r3, r1, #4
 80052be:	d50a      	bpl.n	80052d6 <_printf_i+0xce>
 80052c0:	680e      	ldr	r6, [r1, #0]
 80052c2:	602b      	str	r3, [r5, #0]
 80052c4:	2e00      	cmp	r6, #0
 80052c6:	da03      	bge.n	80052d0 <_printf_i+0xc8>
 80052c8:	232d      	movs	r3, #45	; 0x2d
 80052ca:	4276      	negs	r6, r6
 80052cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d0:	485e      	ldr	r0, [pc, #376]	; (800544c <_printf_i+0x244>)
 80052d2:	230a      	movs	r3, #10
 80052d4:	e019      	b.n	800530a <_printf_i+0x102>
 80052d6:	680e      	ldr	r6, [r1, #0]
 80052d8:	602b      	str	r3, [r5, #0]
 80052da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052de:	bf18      	it	ne
 80052e0:	b236      	sxthne	r6, r6
 80052e2:	e7ef      	b.n	80052c4 <_printf_i+0xbc>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	6820      	ldr	r0, [r4, #0]
 80052e8:	1d19      	adds	r1, r3, #4
 80052ea:	6029      	str	r1, [r5, #0]
 80052ec:	0601      	lsls	r1, r0, #24
 80052ee:	d501      	bpl.n	80052f4 <_printf_i+0xec>
 80052f0:	681e      	ldr	r6, [r3, #0]
 80052f2:	e002      	b.n	80052fa <_printf_i+0xf2>
 80052f4:	0646      	lsls	r6, r0, #25
 80052f6:	d5fb      	bpl.n	80052f0 <_printf_i+0xe8>
 80052f8:	881e      	ldrh	r6, [r3, #0]
 80052fa:	4854      	ldr	r0, [pc, #336]	; (800544c <_printf_i+0x244>)
 80052fc:	2f6f      	cmp	r7, #111	; 0x6f
 80052fe:	bf0c      	ite	eq
 8005300:	2308      	moveq	r3, #8
 8005302:	230a      	movne	r3, #10
 8005304:	2100      	movs	r1, #0
 8005306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800530a:	6865      	ldr	r5, [r4, #4]
 800530c:	60a5      	str	r5, [r4, #8]
 800530e:	2d00      	cmp	r5, #0
 8005310:	bfa2      	ittt	ge
 8005312:	6821      	ldrge	r1, [r4, #0]
 8005314:	f021 0104 	bicge.w	r1, r1, #4
 8005318:	6021      	strge	r1, [r4, #0]
 800531a:	b90e      	cbnz	r6, 8005320 <_printf_i+0x118>
 800531c:	2d00      	cmp	r5, #0
 800531e:	d04d      	beq.n	80053bc <_printf_i+0x1b4>
 8005320:	4615      	mov	r5, r2
 8005322:	fbb6 f1f3 	udiv	r1, r6, r3
 8005326:	fb03 6711 	mls	r7, r3, r1, r6
 800532a:	5dc7      	ldrb	r7, [r0, r7]
 800532c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005330:	4637      	mov	r7, r6
 8005332:	42bb      	cmp	r3, r7
 8005334:	460e      	mov	r6, r1
 8005336:	d9f4      	bls.n	8005322 <_printf_i+0x11a>
 8005338:	2b08      	cmp	r3, #8
 800533a:	d10b      	bne.n	8005354 <_printf_i+0x14c>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	07de      	lsls	r6, r3, #31
 8005340:	d508      	bpl.n	8005354 <_printf_i+0x14c>
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	6861      	ldr	r1, [r4, #4]
 8005346:	4299      	cmp	r1, r3
 8005348:	bfde      	ittt	le
 800534a:	2330      	movle	r3, #48	; 0x30
 800534c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005350:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005354:	1b52      	subs	r2, r2, r5
 8005356:	6122      	str	r2, [r4, #16]
 8005358:	f8cd a000 	str.w	sl, [sp]
 800535c:	464b      	mov	r3, r9
 800535e:	aa03      	add	r2, sp, #12
 8005360:	4621      	mov	r1, r4
 8005362:	4640      	mov	r0, r8
 8005364:	f7ff fee2 	bl	800512c <_printf_common>
 8005368:	3001      	adds	r0, #1
 800536a:	d14c      	bne.n	8005406 <_printf_i+0x1fe>
 800536c:	f04f 30ff 	mov.w	r0, #4294967295
 8005370:	b004      	add	sp, #16
 8005372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005376:	4835      	ldr	r0, [pc, #212]	; (800544c <_printf_i+0x244>)
 8005378:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800537c:	6829      	ldr	r1, [r5, #0]
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	f851 6b04 	ldr.w	r6, [r1], #4
 8005384:	6029      	str	r1, [r5, #0]
 8005386:	061d      	lsls	r5, r3, #24
 8005388:	d514      	bpl.n	80053b4 <_printf_i+0x1ac>
 800538a:	07df      	lsls	r7, r3, #31
 800538c:	bf44      	itt	mi
 800538e:	f043 0320 	orrmi.w	r3, r3, #32
 8005392:	6023      	strmi	r3, [r4, #0]
 8005394:	b91e      	cbnz	r6, 800539e <_printf_i+0x196>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	f023 0320 	bic.w	r3, r3, #32
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	2310      	movs	r3, #16
 80053a0:	e7b0      	b.n	8005304 <_printf_i+0xfc>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	f043 0320 	orr.w	r3, r3, #32
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	2378      	movs	r3, #120	; 0x78
 80053ac:	4828      	ldr	r0, [pc, #160]	; (8005450 <_printf_i+0x248>)
 80053ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053b2:	e7e3      	b.n	800537c <_printf_i+0x174>
 80053b4:	0659      	lsls	r1, r3, #25
 80053b6:	bf48      	it	mi
 80053b8:	b2b6      	uxthmi	r6, r6
 80053ba:	e7e6      	b.n	800538a <_printf_i+0x182>
 80053bc:	4615      	mov	r5, r2
 80053be:	e7bb      	b.n	8005338 <_printf_i+0x130>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	6826      	ldr	r6, [r4, #0]
 80053c4:	6961      	ldr	r1, [r4, #20]
 80053c6:	1d18      	adds	r0, r3, #4
 80053c8:	6028      	str	r0, [r5, #0]
 80053ca:	0635      	lsls	r5, r6, #24
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	d501      	bpl.n	80053d4 <_printf_i+0x1cc>
 80053d0:	6019      	str	r1, [r3, #0]
 80053d2:	e002      	b.n	80053da <_printf_i+0x1d2>
 80053d4:	0670      	lsls	r0, r6, #25
 80053d6:	d5fb      	bpl.n	80053d0 <_printf_i+0x1c8>
 80053d8:	8019      	strh	r1, [r3, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	4615      	mov	r5, r2
 80053e0:	e7ba      	b.n	8005358 <_printf_i+0x150>
 80053e2:	682b      	ldr	r3, [r5, #0]
 80053e4:	1d1a      	adds	r2, r3, #4
 80053e6:	602a      	str	r2, [r5, #0]
 80053e8:	681d      	ldr	r5, [r3, #0]
 80053ea:	6862      	ldr	r2, [r4, #4]
 80053ec:	2100      	movs	r1, #0
 80053ee:	4628      	mov	r0, r5
 80053f0:	f7fa ff76 	bl	80002e0 <memchr>
 80053f4:	b108      	cbz	r0, 80053fa <_printf_i+0x1f2>
 80053f6:	1b40      	subs	r0, r0, r5
 80053f8:	6060      	str	r0, [r4, #4]
 80053fa:	6863      	ldr	r3, [r4, #4]
 80053fc:	6123      	str	r3, [r4, #16]
 80053fe:	2300      	movs	r3, #0
 8005400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005404:	e7a8      	b.n	8005358 <_printf_i+0x150>
 8005406:	6923      	ldr	r3, [r4, #16]
 8005408:	462a      	mov	r2, r5
 800540a:	4649      	mov	r1, r9
 800540c:	4640      	mov	r0, r8
 800540e:	47d0      	blx	sl
 8005410:	3001      	adds	r0, #1
 8005412:	d0ab      	beq.n	800536c <_printf_i+0x164>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	079b      	lsls	r3, r3, #30
 8005418:	d413      	bmi.n	8005442 <_printf_i+0x23a>
 800541a:	68e0      	ldr	r0, [r4, #12]
 800541c:	9b03      	ldr	r3, [sp, #12]
 800541e:	4298      	cmp	r0, r3
 8005420:	bfb8      	it	lt
 8005422:	4618      	movlt	r0, r3
 8005424:	e7a4      	b.n	8005370 <_printf_i+0x168>
 8005426:	2301      	movs	r3, #1
 8005428:	4632      	mov	r2, r6
 800542a:	4649      	mov	r1, r9
 800542c:	4640      	mov	r0, r8
 800542e:	47d0      	blx	sl
 8005430:	3001      	adds	r0, #1
 8005432:	d09b      	beq.n	800536c <_printf_i+0x164>
 8005434:	3501      	adds	r5, #1
 8005436:	68e3      	ldr	r3, [r4, #12]
 8005438:	9903      	ldr	r1, [sp, #12]
 800543a:	1a5b      	subs	r3, r3, r1
 800543c:	42ab      	cmp	r3, r5
 800543e:	dcf2      	bgt.n	8005426 <_printf_i+0x21e>
 8005440:	e7eb      	b.n	800541a <_printf_i+0x212>
 8005442:	2500      	movs	r5, #0
 8005444:	f104 0619 	add.w	r6, r4, #25
 8005448:	e7f5      	b.n	8005436 <_printf_i+0x22e>
 800544a:	bf00      	nop
 800544c:	0800eb55 	.word	0x0800eb55
 8005450:	0800eb66 	.word	0x0800eb66

08005454 <_sbrk_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d06      	ldr	r5, [pc, #24]	; (8005470 <_sbrk_r+0x1c>)
 8005458:	2300      	movs	r3, #0
 800545a:	4604      	mov	r4, r0
 800545c:	4608      	mov	r0, r1
 800545e:	602b      	str	r3, [r5, #0]
 8005460:	f7fb fc98 	bl	8000d94 <_sbrk>
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	d102      	bne.n	800546e <_sbrk_r+0x1a>
 8005468:	682b      	ldr	r3, [r5, #0]
 800546a:	b103      	cbz	r3, 800546e <_sbrk_r+0x1a>
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	bd38      	pop	{r3, r4, r5, pc}
 8005470:	24000130 	.word	0x24000130

08005474 <__sread>:
 8005474:	b510      	push	{r4, lr}
 8005476:	460c      	mov	r4, r1
 8005478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800547c:	f000 f8a0 	bl	80055c0 <_read_r>
 8005480:	2800      	cmp	r0, #0
 8005482:	bfab      	itete	ge
 8005484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005486:	89a3      	ldrhlt	r3, [r4, #12]
 8005488:	181b      	addge	r3, r3, r0
 800548a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800548e:	bfac      	ite	ge
 8005490:	6563      	strge	r3, [r4, #84]	; 0x54
 8005492:	81a3      	strhlt	r3, [r4, #12]
 8005494:	bd10      	pop	{r4, pc}

08005496 <__swrite>:
 8005496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800549a:	461f      	mov	r7, r3
 800549c:	898b      	ldrh	r3, [r1, #12]
 800549e:	05db      	lsls	r3, r3, #23
 80054a0:	4605      	mov	r5, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	4616      	mov	r6, r2
 80054a6:	d505      	bpl.n	80054b4 <__swrite+0x1e>
 80054a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ac:	2302      	movs	r3, #2
 80054ae:	2200      	movs	r2, #0
 80054b0:	f000 f868 	bl	8005584 <_lseek_r>
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054be:	81a3      	strh	r3, [r4, #12]
 80054c0:	4632      	mov	r2, r6
 80054c2:	463b      	mov	r3, r7
 80054c4:	4628      	mov	r0, r5
 80054c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ca:	f000 b817 	b.w	80054fc <_write_r>

080054ce <__sseek>:
 80054ce:	b510      	push	{r4, lr}
 80054d0:	460c      	mov	r4, r1
 80054d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d6:	f000 f855 	bl	8005584 <_lseek_r>
 80054da:	1c43      	adds	r3, r0, #1
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	bf15      	itete	ne
 80054e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80054e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054ea:	81a3      	strheq	r3, [r4, #12]
 80054ec:	bf18      	it	ne
 80054ee:	81a3      	strhne	r3, [r4, #12]
 80054f0:	bd10      	pop	{r4, pc}

080054f2 <__sclose>:
 80054f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f6:	f000 b813 	b.w	8005520 <_close_r>
	...

080054fc <_write_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4d07      	ldr	r5, [pc, #28]	; (800551c <_write_r+0x20>)
 8005500:	4604      	mov	r4, r0
 8005502:	4608      	mov	r0, r1
 8005504:	4611      	mov	r1, r2
 8005506:	2200      	movs	r2, #0
 8005508:	602a      	str	r2, [r5, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	f7fb fbf1 	bl	8000cf2 <_write>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_write_r+0x1e>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	b103      	cbz	r3, 800551a <_write_r+0x1e>
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	24000130 	.word	0x24000130

08005520 <_close_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	4d06      	ldr	r5, [pc, #24]	; (800553c <_close_r+0x1c>)
 8005524:	2300      	movs	r3, #0
 8005526:	4604      	mov	r4, r0
 8005528:	4608      	mov	r0, r1
 800552a:	602b      	str	r3, [r5, #0]
 800552c:	f7fb fbfd 	bl	8000d2a <_close>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_close_r+0x1a>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_close_r+0x1a>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	24000130 	.word	0x24000130

08005540 <_fstat_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4d07      	ldr	r5, [pc, #28]	; (8005560 <_fstat_r+0x20>)
 8005544:	2300      	movs	r3, #0
 8005546:	4604      	mov	r4, r0
 8005548:	4608      	mov	r0, r1
 800554a:	4611      	mov	r1, r2
 800554c:	602b      	str	r3, [r5, #0]
 800554e:	f7fb fbf8 	bl	8000d42 <_fstat>
 8005552:	1c43      	adds	r3, r0, #1
 8005554:	d102      	bne.n	800555c <_fstat_r+0x1c>
 8005556:	682b      	ldr	r3, [r5, #0]
 8005558:	b103      	cbz	r3, 800555c <_fstat_r+0x1c>
 800555a:	6023      	str	r3, [r4, #0]
 800555c:	bd38      	pop	{r3, r4, r5, pc}
 800555e:	bf00      	nop
 8005560:	24000130 	.word	0x24000130

08005564 <_isatty_r>:
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	4d06      	ldr	r5, [pc, #24]	; (8005580 <_isatty_r+0x1c>)
 8005568:	2300      	movs	r3, #0
 800556a:	4604      	mov	r4, r0
 800556c:	4608      	mov	r0, r1
 800556e:	602b      	str	r3, [r5, #0]
 8005570:	f7fb fbf7 	bl	8000d62 <_isatty>
 8005574:	1c43      	adds	r3, r0, #1
 8005576:	d102      	bne.n	800557e <_isatty_r+0x1a>
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	b103      	cbz	r3, 800557e <_isatty_r+0x1a>
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	bd38      	pop	{r3, r4, r5, pc}
 8005580:	24000130 	.word	0x24000130

08005584 <_lseek_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	4d07      	ldr	r5, [pc, #28]	; (80055a4 <_lseek_r+0x20>)
 8005588:	4604      	mov	r4, r0
 800558a:	4608      	mov	r0, r1
 800558c:	4611      	mov	r1, r2
 800558e:	2200      	movs	r2, #0
 8005590:	602a      	str	r2, [r5, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	f7fb fbf0 	bl	8000d78 <_lseek>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d102      	bne.n	80055a2 <_lseek_r+0x1e>
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	b103      	cbz	r3, 80055a2 <_lseek_r+0x1e>
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	24000130 	.word	0x24000130

080055a8 <__malloc_lock>:
 80055a8:	4801      	ldr	r0, [pc, #4]	; (80055b0 <__malloc_lock+0x8>)
 80055aa:	f7ff bb1d 	b.w	8004be8 <__retarget_lock_acquire_recursive>
 80055ae:	bf00      	nop
 80055b0:	24000124 	.word	0x24000124

080055b4 <__malloc_unlock>:
 80055b4:	4801      	ldr	r0, [pc, #4]	; (80055bc <__malloc_unlock+0x8>)
 80055b6:	f7ff bb18 	b.w	8004bea <__retarget_lock_release_recursive>
 80055ba:	bf00      	nop
 80055bc:	24000124 	.word	0x24000124

080055c0 <_read_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4d07      	ldr	r5, [pc, #28]	; (80055e0 <_read_r+0x20>)
 80055c4:	4604      	mov	r4, r0
 80055c6:	4608      	mov	r0, r1
 80055c8:	4611      	mov	r1, r2
 80055ca:	2200      	movs	r2, #0
 80055cc:	602a      	str	r2, [r5, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f7fb fb72 	bl	8000cb8 <_read>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d102      	bne.n	80055de <_read_r+0x1e>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	b103      	cbz	r3, 80055de <_read_r+0x1e>
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	bd38      	pop	{r3, r4, r5, pc}
 80055e0:	24000130 	.word	0x24000130

080055e4 <_init>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr

080055f0 <_fini>:
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	bf00      	nop
 80055f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f6:	bc08      	pop	{r3}
 80055f8:	469e      	mov	lr, r3
 80055fa:	4770      	bx	lr
